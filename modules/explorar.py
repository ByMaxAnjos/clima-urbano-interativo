# modules/explorar.py

import streamlit as st
import folium
from streamlit_folium import st_folium
import geopandas as gpd
import pandas as pd
import os
import matplotlib.pyplot as plt
import matplotlib
import base64
from io import BytesIO
import tempfile
import rasterio
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
import time
from utils.lcz4r import lcz_get_map, process_lcz_map, enhance_lcz_data, lcz_plot_map

# Configurar matplotlib para usar backend n√£o-interativo
matplotlib.use('Agg')

def init_session_state():
    """
    Inicializa o estado da sess√£o com valores padr√£o e valida√ß√£o.
    Implementa controle de vers√£o e limpeza autom√°tica de dados antigos.
    """
    # Vers√£o do esquema de dados para controle de compatibilidade
    current_version = "1.2.0"
    
    # Verificar e atualizar vers√£o do esquema
    if 'lcz_schema_version' not in st.session_state:
        st.session_state.lcz_schema_version = current_version
    elif st.session_state.lcz_schema_version != current_version:
        # Limpar dados antigos se a vers√£o mudou
        clear_lcz_session_data()
        st.session_state.lcz_schema_version = current_version
    
    # Inicializar dados principais
    session_defaults = {
        'lcz_data': None,
        'lcz_raster_data': None,
        'lcz_raster_profile': None,
        'lcz_city_name': None,
        'lcz_processing_success': False,
        'lcz_success_message': "",
        'lcz_error_message': "",
        'lcz_last_update': None,
        'lcz_data_size_mb': 0.0,
        'lcz_area_stats': None,
        'lcz_plot_data': None,
        'lcz_validation_result': None,
        'lcz_session_id': None
    }
    
    for key, default_value in session_defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default_value
    
    # Gerar ID √∫nico da sess√£o se n√£o existir
    if st.session_state.lcz_session_id is None:
        import uuid
        st.session_state.lcz_session_id = str(uuid.uuid4())[:8]
    
    # Verificar integridade dos dados existentes
    validate_session_data()


def validate_session_data():
    """
    Valida a integridade dos dados na sess√£o e corrige inconsist√™ncias.
    """
    try:
        # Verificar consist√™ncia entre dados vetoriais e raster
        if st.session_state.lcz_data is not None:
            if not hasattr(st.session_state.lcz_data, 'geometry'):
                st.warning("‚ö†Ô∏è Dados LCZ corrompidos detectados. Limpando sess√£o...")
                clear_lcz_session_data()
                return
            
            # Calcular tamanho dos dados em mem√≥ria
            import sys
            data_size = sys.getsizeof(st.session_state.lcz_data) / (1024 * 1024)
            st.session_state.lcz_data_size_mb = round(data_size, 2)
            
            # Verificar se os dados s√£o muito antigos (mais de 1 hora)
            if st.session_state.lcz_last_update:
                from datetime import datetime, timedelta
                if isinstance(st.session_state.lcz_last_update, str):
                    last_update = datetime.fromisoformat(st.session_state.lcz_last_update)
                else:
                    last_update = st.session_state.lcz_last_update
                
                if datetime.now() - last_update > timedelta(hours=1):
                    st.info("‚ÑπÔ∏è Dados LCZ antigos detectados. Considere gerar um novo mapa.")
        
        # Verificar limite de mem√≥ria (m√°ximo 100MB por sess√£o)
        if st.session_state.lcz_data_size_mb > 100:
            st.warning("‚ö†Ô∏è Uso de mem√≥ria alto detectado. Considere limpar os dados da sess√£o.")
            
    except Exception as e:
        st.error(f"‚ùå Erro na valida√ß√£o da sess√£o: {str(e)}")
        clear_lcz_session_data()


def clear_lcz_session_data():
    """
    Limpa dados LCZ da sess√£o de forma segura e completa.
    Mant√©m configura√ß√µes importantes e libera mem√≥ria.
    """
    # Lista de chaves a serem limpas
    keys_to_clear = [
        'lcz_data', 'lcz_raster_data', 'lcz_raster_profile',
        'lcz_city_name', 'lcz_processing_success', 'lcz_success_message',
        'lcz_error_message', 'lcz_last_update', 'lcz_data_size_mb',
        'lcz_area_stats', 'lcz_plot_data', 'lcz_validation_result'
    ]
    
    # Limpar dados espec√≠ficos
    for key in keys_to_clear:
        if key in st.session_state:
            st.session_state[key] = None if key != 'lcz_processing_success' else False
    
    # Resetar valores espec√≠ficos
    st.session_state.lcz_processing_success = False
    st.session_state.lcz_success_message = ""
    st.session_state.lcz_error_message = ""
    st.session_state.lcz_data_size_mb = 0.0
    
    # For√ßar coleta de lixo para liberar mem√≥ria
    import gc
    gc.collect()


def get_session_info():
    """
    Retorna informa√ß√µes sobre o estado atual da sess√£o.
    
    Returns
    -------
    dict
        Informa√ß√µes da sess√£o incluindo status, tamanhos e timestamps
    """
    info = {
        'session_id': st.session_state.get('lcz_session_id', 'N/A'),
        'schema_version': st.session_state.get('lcz_schema_version', 'N/A'),
        'has_data': st.session_state.lcz_data is not None,
        'has_raster': st.session_state.lcz_raster_data is not None,
        'city_name': st.session_state.lcz_city_name or 'N/A',
        'data_size_mb': st.session_state.lcz_data_size_mb,
        'last_update': st.session_state.lcz_last_update,
        'processing_success': st.session_state.lcz_processing_success,
        'success_message': st.session_state.lcz_success_message,
        'error_message': st.session_state.lcz_error_message
    }
    
    return info


def update_session_timestamp():
    """
    Atualiza o timestamp da √∫ltima modifica√ß√£o dos dados.
    """
    from datetime import datetime
    st.session_state.lcz_last_update = datetime.now().isoformat()


def save_lcz_data_to_session(data, profile, city_name, enhanced_gdf):
    """
    Salva dados LCZ na sess√£o de forma segura e organizada.
    
    Parameters
    ----------
    data : numpy.ndarray
        Dados raster LCZ
    profile : dict
        Perfil do raster
    city_name : str
        Nome da cidade
    enhanced_gdf : geopandas.GeoDataFrame
        Dados vetoriais aprimorados
    """
    try:
        # Salvar dados principais
        st.session_state.lcz_raster_data = data
        st.session_state.lcz_raster_profile = profile
        st.session_state.lcz_city_name = city_name
        st.session_state.lcz_data = enhanced_gdf
        
        # Atualizar status
        st.session_state.lcz_processing_success = True
        st.session_state.lcz_success_message = f"‚úÖ Mapa LCZ gerado com sucesso para {city_name}!"
        st.session_state.lcz_error_message = ""
        
        # Atualizar timestamp
        update_session_timestamp()
        
        # Validar dados salvos
        validate_session_data()
        
        return True
        
    except Exception as e:
        st.session_state.lcz_error_message = f"Erro ao salvar dados na sess√£o: {str(e)}"
        st.session_state.lcz_processing_success = False
        return False

@st.cache_data
def get_logo_base64():
    """Retorna o logo LCZ4r em base64 com cache."""
    try:
        logo_path = "assets/lcz4r_logo.png"
        if os.path.exists(logo_path):
            with open(logo_path, "rb") as f:
                return base64.b64encode(f.read()).decode()
    except:
        pass
    return ""

def renderizar_pagina():
    """
    Renderiza a p√°gina do m√≥dulo Explorar com tratamento robusto de erros,
    feedback do usu√°rio e monitoramento de sess√£o.
    """
    
    try:
        # Inicializar estado da sess√£o com tratamento de erro
        init_session_state()
        
        # Renderizar cabe√ßalho do m√≥dulo
        renderizar_cabecalho_modulo()
        
        # Exibir status da sess√£o e feedback do usu√°rio
        renderizar_feedback_usuario()
        
        # Se√ß√£o principal: Gerador de mapas LCZ4r
        st.markdown("## üöÄ Gerador de Mapas LCZ4r")
        
        try:
            renderizar_gerador_lcz()
        except Exception as e:
            st.error(f"‚ùå Erro no gerador LCZ: {str(e)}")
            with st.expander("üîß Detalhes t√©cnicos"):
                st.code(f"Erro: {type(e).__name__}\nDetalhes: {str(e)}")
        
        # Se√ß√µes condicionais baseadas na disponibilidade de dados
        if st.session_state.lcz_data is not None:
            renderizar_secoes_analise()
        else:
            renderizar_instrucoes_iniciais()
        
        # Se√ß√£o de informa√ß√µes e ajuda
        renderizar_secao_ajuda()
        
        # Monitoramento de sess√£o (apenas para debug, se necess√°rio)
        if st.sidebar.checkbox("üîß Modo Debug", help="Exibir informa√ß√µes t√©cnicas da sess√£o"):
            renderizar_debug_sessao()
            
    except Exception as e:
        # Tratamento de erro global para a p√°gina
        st.error("‚ùå **Erro cr√≠tico no m√≥dulo Explorar**")
        st.error(f"Detalhes: {str(e)}")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ Reiniciar M√≥dulo", type="primary"):
                clear_lcz_session_data()
                st.rerun()
        
        with col2:
            if st.button("üóëÔ∏è Limpar Sess√£o Completa"):
                for key in list(st.session_state.keys()):
                    if key.startswith('lcz_'):
                        del st.session_state[key]
                st.rerun()
        
        with st.expander("üîß Informa√ß√µes T√©cnicas"):
            st.code(f"""
Tipo do erro: {type(e).__name__}
Detalhes: {str(e)}
Sess√£o ID: {st.session_state.get('lcz_session_id', 'N/A')}
Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}
            """)


def renderizar_cabecalho_modulo():
    """Renderiza o cabe√ßalho visual do m√≥dulo."""
    
    st.markdown("""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 2rem; border-radius: 15px; margin-bottom: 2rem; text-align: center;">
        <div style="display: flex; align-items: center; justify-content: center; gap: 1rem;">
            <img src="data:image/png;base64,{}" width="80" style="border-radius: 10px;">
            <div>
                <h1 style="color: white; margin: 0; font-size: 2.5rem;">üåç M√≥dulo Explorar</h1>
                <p style="color: rgba(255,255,255,0.9); margin: 0; font-size: 1.2rem;">
                    Gere e visualize mapas de Zonas Clim√°ticas Locais (LCZ) interativos
                </p>
            </div>
        </div>
    </div>
    """.format(get_logo_base64()), unsafe_allow_html=True)


def renderizar_feedback_usuario():
    """Renderiza feedback persistente e status da sess√£o para o usu√°rio."""
    
    # Mensagens de sucesso persistentes
    if st.session_state.lcz_processing_success and st.session_state.lcz_success_message:
        st.success(st.session_state.lcz_success_message)
    
    # Mensagens de erro persistentes
    if st.session_state.lcz_error_message:
        st.error(f"‚ùå **√öltimo erro:** {st.session_state.lcz_error_message}")
        
        col1, col2 = st.columns([3, 1])
        with col2:
            if st.button("üóëÔ∏è Limpar Erro", help="Remove a mensagem de erro"):
                st.session_state.lcz_error_message = ""
                st.rerun()
    
    # Status da sess√£o (compacto)
    if st.session_state.lcz_data is not None:
        session_info = get_session_info()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üìä Status", 
                "Dados Carregados",
                help=f"Cidade: {session_info['city_name']}"
            )
        
        with col2:
            st.metric(
                "üíæ Mem√≥ria", 
                f"{session_info['data_size_mb']:.1f} MB",
                help="Uso de mem√≥ria da sess√£o"
            )
        
        with col3:
            if session_info['last_update']:
                from datetime import datetime
                try:
                    if isinstance(session_info['last_update'], str):
                        last_update = datetime.fromisoformat(session_info['last_update'])
                    else:
                        last_update = session_info['last_update']
                    
                    time_diff = datetime.now() - last_update
                    if time_diff.seconds < 60:
                        time_str = "Agora"
                    elif time_diff.seconds < 3600:
                        time_str = f"{time_diff.seconds//60}min"
                    else:
                        time_str = f"{time_diff.seconds//3600}h"
                    
                    st.metric("üïí Atualizado", time_str, help="√öltima atualiza√ß√£o dos dados")
                except:
                    st.metric("üïí Atualizado", "N/A")
            else:
                st.metric("üïí Atualizado", "N/A")
        
        with col4:
            st.metric(
                "üÜî Sess√£o", 
                session_info['session_id'],
                help="ID √∫nico da sess√£o atual"
            )


def renderizar_secoes_analise():
    """Renderiza as se√ß√µes de an√°lise quando h√° dados dispon√≠veis."""
    
    try:
        # 1. Visualiza√ß√£o com matplotlib
        st.markdown("---")
        st.markdown("## üé® Visualizar LCZ Map")
        
        try:
            renderizar_secao_matplotlib()
        except Exception as e:
            st.error(f"‚ùå Erro na visualiza√ß√£o matplotlib: {str(e)}")
            if st.button("üîÑ Tentar Novamente - Matplotlib"):
                st.rerun()
        
        # 2. An√°lise de √°rea
        st.markdown("---")
        st.markdown("## üìä An√°lise de √Årea por Classe LCZ")
        
        try:
            renderizar_secao_calculo_area()
        except Exception as e:
            st.error(f"‚ùå Erro na an√°lise de √°rea: {str(e)}")
            # Limpar dados corrompidos de √°rea
            st.session_state.lcz_area_stats = None
            st.session_state.lcz_plot_data = None
            st.session_state.lcz_area_summary = None
            
            if st.button("üîÑ Recalcular An√°lise de √Årea"):
                st.rerun()
        
        # 3. Mapa interativo Folium
        st.markdown("---")
        st.markdown("## üó∫Ô∏è Mapa Interativo")
        
        try:
            renderizar_mapa_folium()
        except Exception as e:
            st.error(f"‚ùå Erro no mapa interativo: {str(e)}")
            if st.button("üîÑ Recarregar Mapa Interativo"):
                st.rerun()
                
    except Exception as e:
        st.error(f"‚ùå Erro nas se√ß√µes de an√°lise: {str(e)}")


def renderizar_instrucoes_iniciais():
    """Renderiza instru√ß√µes quando n√£o h√° dados carregados."""
    
    st.info("‚ÑπÔ∏è **Bem-vindo ao M√≥dulo Explorar!** Gere um mapa LCZ primeiro para acessar todas as funcionalidades.")
    
    with st.expander("üìñ Guia R√°pido de Uso", expanded=True):
        st.markdown("""
        ### üöÄ Primeiros Passos
        
        1. **Digite o nome de uma cidade** no campo acima
        2. **Clique em "Gerar Mapa LCZ"** para processar os dados
        3. **Aguarde o processamento** (pode levar alguns minutos)
        4. **Explore as visualiza√ß√µes** que aparecer√£o automaticamente
        
        ### üí° Dicas Importantes
        
        - **Nomes de cidades:** Use nomes completos como "S√£o Paulo, Brazil" ou "New York, USA"
        - **Conex√£o:** Certifique-se de ter uma conex√£o est√°vel com a internet
        - **Paci√™ncia:** O processamento pode levar 2-5 minutos dependendo do tamanho da cidade
        - **Mem√≥ria:** Cidades muito grandes podem usar mais mem√≥ria
        
        ### üåç Exemplos de Cidades Testadas
        
        - S√£o Paulo, Brazil
        - Rio de Janeiro, Brazil
        - New York, USA
        - London, UK
        - Tokyo, Japan
        - Paris, France
        """)


def renderizar_secao_ajuda():
    """Renderiza se√ß√£o de ajuda e instru√ß√µes finais."""
    
    st.markdown("---")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        ### üí° Como Usar o M√≥dulo Explorar
        
        1. **üöÄ Gere um Mapa:** Use o gerador LCZ4r para criar um mapa para sua cidade de interesse
        2. **üé® Visualize:** Veja o mapa em formato cient√≠fico com matplotlib
        3. **üìä Analise:** Explore a distribui√ß√£o de √°reas por classe LCZ com gr√°ficos interativos
        4. **üó∫Ô∏è Explore:** Interaja com o mapa usando a interface Folium
        5. **‚û°Ô∏è Pr√≥ximo passo:** V√° para "Investigar" para an√°lises detalhadas ou "Simular" para testar interven√ß√µes
        """)
    
    with col2:
        st.markdown("### üÜò Precisa de Ajuda?")
        
        if st.button("üîÑ Reiniciar M√≥dulo", help="Limpa todos os dados e reinicia"):
            clear_lcz_session_data()
            st.success("‚úÖ M√≥dulo reiniciado!")
            st.rerun()
        
        if st.button("üìä Ver Status da Sess√£o", help="Mostra informa√ß√µes t√©cnicas"):
            info = get_session_info()
            st.json(info)
        
        with st.expander("‚ùì FAQ"):
            st.markdown("""
            **P: O processamento est√° muito lento?**
            R: Isso √© normal. Aguarde alguns minutos.
            
            **P: Erro de conex√£o?**
            R: Verifique sua internet e tente novamente.
            
            **P: Cidade n√£o encontrada?**
            R: Tente usar o nome completo com pa√≠s.
            
            **P: Como limpar os dados?**
            R: Use o bot√£o "Limpar Dados" ou "Reiniciar M√≥dulo".
            """)


def renderizar_debug_sessao():
    """Renderiza informa√ß√µes de debug da sess√£o (apenas para desenvolvimento)."""
    
    st.sidebar.markdown("### üîß Debug da Sess√£o")
    
    info = get_session_info()
    
    st.sidebar.json(info)
    
    if st.sidebar.button("üóëÔ∏è Limpar Sess√£o Debug"):
        clear_lcz_session_data()
        st.sidebar.success("Sess√£o limpa!")
    
    # Valida√ß√£o em tempo real
    if st.session_state.lcz_data is not None:
        from utils.lcz4r import validate_lcz_data
        validation = validate_lcz_data(st.session_state.lcz_data)
        
        st.sidebar.markdown("**Valida√ß√£o:**")
        if validation['valid']:
            st.sidebar.success("‚úÖ Dados v√°lidos")
        else:
            st.sidebar.error("‚ùå Dados inv√°lidos")
        
        if validation['warnings']:
            st.sidebar.warning(f"‚ö†Ô∏è {len(validation['warnings'])} avisos")
        
        if validation['errors']:
            st.sidebar.error(f"‚ùå {len(validation['errors'])} erros")

def renderizar_gerador_lcz():
    """Renderiza a se√ß√£o do gerador de mapas LCZ."""
    
    with st.expander("üîß Gerar Novo Mapa LCZ", expanded=not st.session_state.lcz_processing_success):
        st.markdown("""
        **LCZ4r** √© uma ferramenta avan√ßada para processamento de Zonas Clim√°ticas Locais que permite:
        
        - üåç Gerar mapas LCZ para qualquer cidade do mundo
        - üìä Processar dados de alta resolu√ß√£o automaticamente  
        - üó∫Ô∏è Visualizar resultados de forma interativa
        - üíæ Salvar dados na sess√£o para an√°lises futuras
        """)
        
        # Interface de entrada
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            cidade_nome = st.text_input(
                "üèôÔ∏è Nome da Cidade:",
                placeholder="Ex: S√£o Paulo, New York, London, Tokyo...",
                help="Digite o nome da cidade para gerar o mapa LCZ",
                value=st.session_state.lcz_city_name or ""
            )
        
        with col2:
            gerar_mapa = st.button("üöÄ Gerar Mapa LCZ", type="primary", use_container_width=True)
        
        with col3:
            if st.button("üóëÔ∏è Limpar Dados", use_container_width=True):
                clear_lcz_session_data()
                st.rerun()
        
        # Processamento do mapa
        if gerar_mapa and cidade_nome:
            processar_mapa_lcz(cidade_nome)

def processar_mapa_lcz(cidade_nome):
    """
    Processa e gera o mapa LCZ para a cidade especificada com tratamento robusto de erros.
    Utiliza o sistema aprimorado de gerenciamento de sess√£o.
    """
    
    # Limpar dados anteriores
    clear_lcz_session_data()
    
    # Barra de progresso e status
    progress_bar = st.progress(0)
    status_text = st.empty()
    error_container = st.empty()
    
    try:
        # Etapa 1: Valida√ß√£o inicial
        status_text.text("üîç Validando entrada...")
        progress_bar.progress(10)
        
        if not cidade_nome or len(cidade_nome.strip()) < 2:
            raise ValueError("Nome da cidade deve ter pelo menos 2 caracteres")
        
        cidade_nome = cidade_nome.strip()
        
        # Etapa 2: Geocodifica√ß√£o
        status_text.text("üì° Conectando ao servi√ßo de geocodifica√ß√£o...")
        progress_bar.progress(25)
        
        # Etapa 3: Download dos dados LCZ
        status_text.text("üåç Baixando dados LCZ globais...")
        progress_bar.progress(45)
        
        # Importar exce√ß√µes personalizadas
        from utils.lcz4r import GeocodeError, DataProcessingError
        
        data, profile = lcz_get_map(cidade_nome)
        
        # Etapa 4: Processamento vetorial
        status_text.text("‚öôÔ∏è Processando dados LCZ...")
        progress_bar.progress(65)
        
        lcz_gdf = process_lcz_map(data, profile)
        
        # Etapa 5: Aprimoramento dos dados
        status_text.text("‚ú® Aprimorando dados...")
        progress_bar.progress(80)
        
        enhanced_gdf = enhance_lcz_data(lcz_gdf)
        
        # Etapa 6: Valida√ß√£o dos dados processados
        status_text.text("üîç Validando dados processados...")
        progress_bar.progress(90)
        
        from utils.lcz4r import validate_lcz_data
        validation_result = validate_lcz_data(enhanced_gdf)
        
        if not validation_result['valid']:
            raise DataProcessingError(f"Dados inv√°lidos: {'; '.join(validation_result['errors'])}")
        
        # Etapa 7: Salvamento na sess√£o
        status_text.text("üíæ Salvando na sess√£o...")
        progress_bar.progress(95)
        
        # Usar fun√ß√£o aprimorada de salvamento
        success = save_lcz_data_to_session(data, profile, cidade_nome, enhanced_gdf)
        
        if not success:
            raise Exception("Falha ao salvar dados na sess√£o")
        
        # Salvar resultado da valida√ß√£o
        st.session_state.lcz_validation_result = validation_result
        
        # Etapa 8: Finaliza√ß√£o
        progress_bar.progress(100)
        status_text.text("‚úÖ Processamento conclu√≠do!")
        
        # Exibir m√©tricas de sucesso
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Classes LCZ", len(enhanced_gdf['zcl_classe'].unique()))
        with col2:
            st.metric("Pol√≠gonos", len(enhanced_gdf))
        with col3:
            area_total = enhanced_gdf['area_km2'].sum() if 'area_km2' in enhanced_gdf.columns else 0
            st.metric("√Årea Total", f"{area_total:.1f} km¬≤")
        with col4:
            st.metric("Tamanho", f"{st.session_state.lcz_data_size_mb:.1f} MB")
        
        # Exibir avisos de valida√ß√£o se houver
        if validation_result['warnings']:
            with st.expander("‚ö†Ô∏è Avisos de Valida√ß√£o", expanded=False):
                for warning in validation_result['warnings']:
                    st.warning(f"‚ö†Ô∏è {warning}")
        
        # Aguardar um pouco para mostrar o progresso completo
        time.sleep(1)
        
        # For√ßar rerun para atualizar as se√ß√µes
        st.rerun()
        
    except GeocodeError as e:
        progress_bar.progress(0)
        status_text.text("")
        error_container.error(f"üåê **Erro de Geocodifica√ß√£o:** {str(e)}")
        
        with error_container.expander("üí° Dicas para resolver problemas de geocodifica√ß√£o"):
            st.markdown("""
            **Sugest√µes para melhorar a busca:**
            - Tente usar o nome completo da cidade: "S√£o Paulo, Brazil"
            - Use nomes em ingl√™s quando poss√≠vel: "Rio de Janeiro, Brazil"
            - Verifique a ortografia do nome da cidade
            - Tente varia√ß√µes do nome (ex: "NYC" ‚Üí "New York City")
            - Para cidades pequenas, adicione o estado/prov√≠ncia
            """)
        
        st.session_state.lcz_error_message = str(e)
        
    except DataProcessingError as e:
        progress_bar.progress(0)
        status_text.text("")
        error_container.error(f"üìä **Erro no Processamento:** {str(e)}")
        
        with error_container.expander("üí° Poss√≠veis solu√ß√µes"):
            st.markdown("""
            **Problemas comuns e solu√ß√µes:**
            - **√Årea fora de cobertura:** Verifique se a cidade est√° na cobertura global do LCZ
            - **Dados insuficientes:** Tente uma √°rea metropolitana maior
            - **Nome incorreto:** Confirme se o nome da cidade est√° correto
            - **Regi√£o muito pequena:** LCZ funciona melhor com √°reas urbanas maiores
            """)
        
        st.session_state.lcz_error_message = str(e)
        
    except ConnectionError as e:
        progress_bar.progress(0)
        status_text.text("")
        error_container.error(f"üåê **Erro de Conex√£o:** {str(e)}")
        
        with error_container.expander("üí° Dicas para resolver problemas de conex√£o"):
            st.markdown("""
            **Solu√ß√µes para problemas de rede:**
            - Verifique sua conex√£o com a internet
            - Tente novamente em alguns minutos
            - Verifique se n√£o h√° firewall bloqueando o acesso
            - Se o problema persistir, o servi√ßo pode estar temporariamente indispon√≠vel
            """)
        
        st.session_state.lcz_error_message = str(e)
        
    except Exception as e:
        progress_bar.progress(0)
        status_text.text("")
        error_container.error(f"‚ùå **Erro Inesperado:** {str(e)}")
        
        with error_container.expander("üîß Informa√ß√µes t√©cnicas"):
            st.code(f"Tipo do erro: {type(e).__name__}\nDetalhes: {str(e)}")
            st.markdown("""
            **Se o problema persistir:**
            - Tente limpar os dados da sess√£o e gerar novamente
            - Verifique se o nome da cidade est√° correto
            - Tente uma cidade diferente para testar o sistema
            """)
        
        st.session_state.lcz_error_message = str(e)
    
    finally:
        # Sempre limpar elementos tempor√°rios
        if 'progress_bar' in locals():
            progress_bar.empty()
        if 'status_text' in locals():
            status_text.empty()

def renderizar_secao_matplotlib():
    """Renderiza a se√ß√£o de visualiza√ß√£o com matplotlib."""
    
    st.markdown("### ‚öôÔ∏è Configura√ß√µes de Visualiza√ß√£o")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        titulo_personalizado = st.text_input(
            "üè∑Ô∏è T√≠tulo do Mapa (opcional):",
            placeholder=f"Ex: Zonas Clim√°ticas Locais - {st.session_state.lcz_city_name or 'Cidade'}",
            help="Deixe em branco para usar o t√≠tulo padr√£o"
        )
    
    with col2:
        alta_resolucao = st.checkbox(
            "üì∏ Alta Resolu√ß√£o",
            value=True,
            help="Gera imagem em 300 DPI para melhor qualidade"
        )
    
    # Bot√£o para gerar visualiza√ß√£o
    if st.button("üé® Gerar Visualiza√ß√£o", type="primary", use_container_width=True):
        gerar_visualizacao_matplotlib(titulo_personalizado, alta_resolucao)

def gerar_visualizacao_matplotlib(titulo_personalizado=None, alta_resolucao=True):
    """Gera visualiza√ß√£o usando matplotlib e lcz_plot_map."""
    
    with st.spinner("Gerando visualiza√ß√£o de alta qualidade..."):
        try:
            # Usar dados da sess√£o
            data = st.session_state.lcz_raster_data
            profile = st.session_state.lcz_raster_profile
            
            if data is None or profile is None:
                st.error("‚ùå Dados raster n√£o encontrados na sess√£o. Gere um mapa primeiro.")
                return
            
            # Configurar par√¢metros
            figsize = (16, 12) if alta_resolucao else (12, 8)
            dpi = 300 if alta_resolucao else 150
            
            # Configurar t√≠tulo
            cidade = st.session_state.lcz_city_name or "Cidade"
            titulo = titulo_personalizado if titulo_personalizado else f"Mapa de Zonas Clim√°ticas Locais - {cidade}"
            
            # Gerar visualiza√ß√£o usando lcz_plot_map
            plt.figure(figsize=figsize, dpi=dpi)
            fig = lcz_plot_map(
                (data, profile),
                title=titulo,
                show_legend=True,
                isave=False  # N√£o salvar automaticamente
            )
            
            # Salvar em buffer para exibi√ß√£o
            buf = BytesIO()
            plt.savefig(buf, format='png', dpi=dpi, bbox_inches='tight', 
                       facecolor='white', edgecolor='none')
            buf.seek(0)
            
            # Exibir a imagem
            st.markdown("#### üñºÔ∏è Visualiza√ß√£o Gerada")
            st.image(buf, caption=titulo, use_container_width=True)
            
            # Preparar dados para download
            buf.seek(0)
            png_data = buf.getvalue()
            
            # Bot√µes de download
            col1, col2 = st.columns(2)
            
            with col1:
                # Download da imagem PNG
                st.download_button(
                    label="üì∏ Baixar Imagem PNG",
                    data=png_data,
                    file_name=f"lcz_map_{st.session_state.lcz_city_name or 'cidade'}.png",
                    mime="image/png",
                    help="Imagem do mapa LCZ em alta resolu√ß√£o",
                    use_container_width=True
                )
            
            with col2:
                # Download do GeoJSON
                if st.session_state.lcz_data is not None:
                    geojson_data = st.session_state.lcz_data.to_json()
                    st.download_button(
                        label="üó∫Ô∏è Baixar GeoJSON",
                        data=geojson_data,
                        file_name=f"lcz_data_{st.session_state.lcz_city_name or 'cidade'}.geojson",
                        mime="application/json",
                        help="Dados vetoriais do mapa LCZ",
                        use_container_width=True
                    )
            
            plt.close(fig)  # Liberar mem√≥ria
            st.success("‚úÖ Visualiza√ß√£o gerada com sucesso!")
            
        except Exception as e:
            st.error(f"‚ùå Erro ao gerar visualiza√ß√£o: {str(e)}")

def renderizar_secao_calculo_area():
    """
    Renderiza a se√ß√£o de c√°lculo de √°rea com an√°lise avan√ßada usando lcz_cal_area.
    Inclui gr√°ficos Plotly interativos, relat√≥rios e estat√≠sticas detalhadas.
    """
    
    if st.session_state.lcz_data is None:
        st.warning("‚ö†Ô∏è Dados LCZ n√£o encontrados na sess√£o.")
        return
    
    try:
        # Verificar se j√° temos dados de √°rea calculados na sess√£o
        if st.session_state.lcz_area_stats is None or st.session_state.lcz_plot_data is None:
            with st.spinner("Calculando estat√≠sticas de √°rea..."):
                from utils.lcz4r import lcz_cal_area
                result = lcz_cal_area(st.session_state.lcz_data)
                st.session_state.lcz_area_stats = result['stats']
                st.session_state.lcz_plot_data = result['plot_data']
                st.session_state.lcz_area_summary = result['summary']
        
        # Usar dados da sess√£o
        area_stats = st.session_state.lcz_area_stats
        plot_data = st.session_state.lcz_plot_data
        summary = st.session_state.lcz_area_summary
        
        # Exibir resumo geral
        st.markdown("### üìà Resumo Geral")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "√Årea Total", 
                f"{summary['total_area_km2']:.1f} km¬≤",
                help="√Årea total coberta pelo mapa LCZ"
            )
        
        with col2:
            st.metric(
                "Classes LCZ", 
                summary['num_classes'],
                help="N√∫mero de diferentes classes LCZ presentes"
            )
        
        with col3:
            st.metric(
                "Pol√≠gonos", 
                summary['num_total_poligonos'],
                help="N√∫mero total de pol√≠gonos no mapa"
            )
        
        with col4:
            st.metric(
                "Classe Dominante", 
                summary['classe_dominante'],
                f"{summary['percentual_classe_dominante']:.1f}%",
                help="Classe LCZ com maior √°rea"
            )
        
        # Interface de controle para visualiza√ß√£o
        st.markdown("### ‚öôÔ∏è Configura√ß√µes de Visualiza√ß√£o")
        
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            tipo_grafico = st.selectbox(
                "üìä Tipo de Gr√°fico:",
                ["bar", "pie", "donut", "treemap"],
                format_func=lambda x: {
                    "bar": "üìä Gr√°fico de Barras", 
                    "pie": "ü•ß Gr√°fico de Pizza", 
                    "donut": "üç© Gr√°fico Donut",
                    "treemap": "üóÇÔ∏è Mapa de √Årvore"
                }[x],
                help="Escolha o tipo de visualiza√ß√£o para a distribui√ß√£o de √°reas"
            )
        
        with col2:
            mostrar_tabela = st.checkbox("üìã Mostrar Tabela", value=True)
        
        with col3:
            mostrar_relatorio = st.checkbox("üìÑ Gerar Relat√≥rio", value=False)
        
        # Bot√µes de a√ß√£o
        col1, col2 = st.columns(2)
        
        with col1:
            gerar_analise = st.button("üìä Gerar An√°lise Completa", type="primary", use_container_width=True)
        
        with col2:
            recalcular = st.button("üîÑ Recalcular √Åreas", use_container_width=True)
        
        # Recalcular se solicitado
        if recalcular:
            st.session_state.lcz_area_stats = None
            st.session_state.lcz_plot_data = None
            st.session_state.lcz_area_summary = None
            st.rerun()
        
        # Gerar an√°lise completa
        if gerar_analise:
            gerar_analise_area_completa(area_stats, plot_data, summary, tipo_grafico, mostrar_tabela, mostrar_relatorio)
            
    except Exception as e:
        st.error(f"‚ùå Erro na an√°lise de √°rea: {str(e)}")
        # Limpar dados corrompidos
        st.session_state.lcz_area_stats = None
        st.session_state.lcz_plot_data = None
        st.session_state.lcz_area_summary = None


def gerar_analise_area_completa(area_stats, plot_data, summary, tipo_grafico, mostrar_tabela, mostrar_relatorio):
    """
    Gera an√°lise completa de √°rea com gr√°ficos interativos, tabelas e relat√≥rios.
    """
    
    try:
        st.markdown("### üìä An√°lise de Distribui√ß√£o de √Årea")
        
        # Gerar gr√°fico principal
        fig = criar_grafico_area_plotly(area_stats, plot_data, tipo_grafico)
        
        if fig:
            st.plotly_chart(fig, use_container_width=True)
            
            # Salvar gr√°fico para download
            import plotly.io as pio
            img_bytes = pio.to_image(fig, format="png", width=1200, height=800, scale=2)
            
            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    label="üì∏ Baixar Gr√°fico PNG",
                    data=img_bytes,
                    file_name=f"lcz_area_analysis_{st.session_state.lcz_city_name or 'cidade'}.png",
                    mime="image/png",
                    help="Baixar gr√°fico de an√°lise de √°rea em alta resolu√ß√£o"
                )
            
            with col2:
                # Download dos dados em CSV
                csv_data = area_stats.to_csv(index=False)
                st.download_button(
                    label="üìä Baixar Dados CSV",
                    data=csv_data,
                    file_name=f"lcz_area_stats_{st.session_state.lcz_city_name or 'cidade'}.csv",
                    mime="text/csv",
                    help="Baixar estat√≠sticas de √°rea em formato CSV"
                )
        
        # Mostrar tabela detalhada se solicitado
        if mostrar_tabela:
            st.markdown("### üìã Tabela Detalhada de Estat√≠sticas")
            
            # Formatar tabela para melhor visualiza√ß√£o
            area_stats_display = area_stats.copy()
            area_stats_display['area_total_km2'] = area_stats_display['area_total_km2'].round(2)
            area_stats_display['area_media_km2'] = area_stats_display['area_media_km2'].round(3)
            area_stats_display['percentual'] = area_stats_display['percentual'].round(1)
            
            st.dataframe(
                area_stats_display,
                use_container_width=True,
                column_config={
                    "zcl_classe": "Classe LCZ",
                    "area_total_km2": st.column_config.NumberColumn(
                        "√Årea Total (km¬≤)",
                        format="%.2f"
                    ),
                    "num_poligonos": "Pol√≠gonos",
                    "area_media_km2": st.column_config.NumberColumn(
                        "√Årea M√©dia (km¬≤)",
                        format="%.3f"
                    ),
                    "percentual": st.column_config.NumberColumn(
                        "Percentual (%)",
                        format="%.1f%%"
                    )
                }
            )
        
        # Gerar relat√≥rio se solicitado
        if mostrar_relatorio:
            st.markdown("### üìÑ Relat√≥rio de An√°lise LCZ")
            
            from utils.lcz4r import lcz_area_analysis_report
            relatorio = lcz_area_analysis_report(st.session_state.lcz_data, st.session_state.lcz_city_name)
            
            st.text_area(
                "Relat√≥rio Completo:",
                value=relatorio,
                height=400,
                help="Relat√≥rio detalhado da an√°lise de √°rea LCZ"
            )
            
            # Download do relat√≥rio
            st.download_button(
                label="üìÑ Baixar Relat√≥rio TXT",
                data=relatorio,
                file_name=f"relatorio_lcz_{st.session_state.lcz_city_name or 'cidade'}.txt",
                mime="text/plain",
                help="Baixar relat√≥rio completo em formato texto"
            )
        
        # An√°lise adicional
        st.markdown("### üîç An√°lise Adicional")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # An√°lise urbano vs natural
            urbano_mask = area_stats['zcl_classe'].str.contains('LCZ [1-9]|LCZ 10')
            natural_mask = area_stats['zcl_classe'].str.contains('LCZ [A-G]')
            
            area_urbana = area_stats[urbano_mask]['area_total_km2'].sum()
            area_natural = area_stats[natural_mask]['area_total_km2'].sum()
            
            st.metric(
                "√Årea Urbana (LCZ 1-10)",
                f"{area_urbana:.1f} km¬≤",
                f"{(area_urbana/summary['total_area_km2']*100):.1f}%"
            )
            
            st.metric(
                "√Årea Natural (LCZ A-G)",
                f"{area_natural:.1f} km¬≤",
                f"{(area_natural/summary['total_area_km2']*100):.1f}%"
            )
        
        with col2:
            # Fragmenta√ß√£o e densidade
            fragmentacao = summary['num_total_poligonos'] / summary['total_area_km2']
            
            st.metric(
                "Fragmenta√ß√£o",
                f"{fragmentacao:.2f} pol/km¬≤",
                help="N√∫mero de pol√≠gonos por km¬≤ (maior = mais fragmentado)"
            )
            
            # Classe mais fragmentada
            area_stats['fragmentacao'] = area_stats['num_poligonos'] / area_stats['area_total_km2']
            classe_fragmentada = area_stats.loc[area_stats['fragmentacao'].idxmax(), 'zcl_classe']
            
            st.metric(
                "Classe Mais Fragmentada",
                classe_fragmentada,
                f"{area_stats['fragmentacao'].max():.2f} pol/km¬≤"
            )
        
        st.success("‚úÖ An√°lise de √°rea gerada com sucesso!")
        
    except Exception as e:
        st.error(f"‚ùå Erro ao gerar an√°lise: {str(e)}")


def criar_grafico_area_plotly(area_stats, plot_data, tipo_grafico):
    """
    Cria gr√°fico Plotly baseado no tipo selecionado.
    """
    
    try:
        cores_lcz = plot_data['cores_lcz']
        colors = [cores_lcz.get(classe, '#808080') for classe in area_stats['zcl_classe']]
        
        cidade_nome = st.session_state.lcz_city_name or 'Cidade'
        
        if tipo_grafico == "bar":
            fig = px.bar(
                area_stats, 
                x='zcl_classe', 
                y='area_total_km2',
                title=f"Distribui√ß√£o de √Årea por Classe LCZ - {cidade_nome}",
                color='zcl_classe',
                color_discrete_map=cores_lcz,
                hover_data=['num_poligonos', 'area_media_km2', 'percentual'],
                labels={
                    'area_total_km2': '√Årea Total (km¬≤)',
                    'zcl_classe': 'Classe LCZ',
                    'num_poligonos': 'N√∫mero de Pol√≠gonos',
                    'area_media_km2': '√Årea M√©dia (km¬≤)',
                    'percentual': 'Percentual (%)'
                }
            )
            fig.update_layout(showlegend=False, xaxis_tickangle=-45)
            
        elif tipo_grafico == "pie":
            fig = px.pie(
                area_stats,
                values='area_total_km2',
                names='zcl_classe',
                title=f"Distribui√ß√£o Percentual de √Årea por Classe LCZ - {cidade_nome}",
                color='zcl_classe',
                color_discrete_map=cores_lcz,
                hover_data=['num_poligonos']
            )
            
        elif tipo_grafico == "donut":
            fig = go.Figure(data=[go.Pie(
                labels=area_stats['zcl_classe'],
                values=area_stats['area_total_km2'],
                hole=0.4,
                marker_colors=colors,
                hovertemplate='<b>%{label}</b><br>' +
                             '√Årea: %{value:.2f} km¬≤<br>' +
                             'Percentual: %{percent}<br>' +
                             '<extra></extra>'
            )])
            
            fig.update_layout(
                title=f"Distribui√ß√£o de √Årea LCZ (Donut) - {cidade_nome}",
                annotations=[dict(text='LCZ', x=0.5, y=0.5, font_size=20, showarrow=False)]
            )
            
        elif tipo_grafico == "treemap":
            fig = px.treemap(
                area_stats,
                path=['zcl_classe'],
                values='area_total_km2',
                title=f"Mapa de √Årvore - Distribui√ß√£o LCZ - {cidade_nome}",
                color='zcl_classe',
                color_discrete_map=cores_lcz,
                hover_data=['num_poligonos', 'percentual']
            )
        
        # Configura√ß√µes gerais
        fig.update_layout(
            font=dict(size=12),
            title_font_size=16,
            height=600
        )
        
        return fig
        
    except Exception as e:
        st.error(f"‚ùå Erro ao criar gr√°fico: {str(e)}")
        return None

def gerar_grafico_area_plotly(area_stats, tipo_grafico, mostrar_tabela):
    """Gera gr√°ficos interativos de √°rea usando Plotly."""
    
    try:
        # Preparar dados
        classes = area_stats['Classe LCZ']
        areas = area_stats['√Årea Total (km¬≤)']
        
        # Cores LCZ padr√£o
        cores_lcz = {
            'LCZ 1': '#910613', 'LCZ 2': '#D9081C', 'LCZ 3': '#FF0A22', 'LCZ 4': '#C54F1E',
            'LCZ 5': '#FF6628', 'LCZ 6': '#FF985E', 'LCZ 7': '#FDED3F', 'LCZ 8': '#BBBBBB',
            'LCZ 9': '#FFCBAB', 'LCZ 10': '#565656', 'LCZ A': '#006A18', 'LCZ B': '#00A926',
            'LCZ C': '#628432', 'LCZ D': '#B5DA7F', 'LCZ E': '#000000', 'LCZ F': '#FCF7B1',
            'LCZ G': '#656BFA'
        }
        
        colors = [cores_lcz.get(classe, '#808080') for classe in classes]
        
        # Criar gr√°fico baseado no tipo selecionado
        if tipo_grafico == "bar":
            fig = px.bar(
                area_stats, 
                x='Classe LCZ', 
                y='√Årea Total (km¬≤)',
                title=f"Distribui√ß√£o de √Årea por Classe LCZ - {st.session_state.lcz_city_name or 'Cidade'}",
                color='Classe LCZ',
                color_discrete_map=cores_lcz,
                hover_data=['N√∫mero de Pol√≠gonos', '√Årea M√©dia (km¬≤)']
            )
            fig.update_layout(showlegend=False, xaxis_tickangle=-45)
            
        elif tipo_grafico == "pie":
            fig = px.pie(
                area_stats,
                values='√Årea Total (km¬≤)',
                names='Classe LCZ',
                title=f"Distribui√ß√£o Percentual de √Årea por Classe LCZ - {st.session_state.lcz_city_name or 'Cidade'}",
                color='Classe LCZ',
                color_discrete_map=cores_lcz
            )
            
        elif tipo_grafico == "donut":
            fig = go.Figure(data=[go.Pie(
                labels=classes,
                values=areas,
                hole=0.4,
                marker_colors=colors,
                hovertemplate='<b>%{label}</b><br>√Årea: %{value:.2f} km¬≤<br>Percentual: %{percent}<extra></extra>'
            )])
            fig.update_layout(
                title=f"Distribui√ß√£o de √Årea por Classe LCZ - {st.session_state.lcz_city_name or 'Cidade'}",
                annotations=[dict(text='LCZ', x=0.5, y=0.5, font_size=20, showarrow=False)]
            )
        
        # Configura√ß√µes gerais do layout
        fig.update_layout(
            height=600,
            font=dict(size=12),
            title_font_size=16,
            margin=dict(t=80, b=40, l=40, r=40)
        )
        
        # Exibir gr√°fico
        st.plotly_chart(fig, use_container_width=True)
        
        # Exibir tabela se solicitado
        if mostrar_tabela:
            st.markdown("#### üìã Tabela Detalhada")
            
            # Adicionar percentuais
            area_stats_display = area_stats.copy()
            area_stats_display['Percentual (%)'] = (area_stats_display['√Årea Total (km¬≤)'] / area_stats_display['√Årea Total (km¬≤)'].sum() * 100).round(2)
            
            st.dataframe(
                area_stats_display,
                use_container_width=True,
                hide_index=True
            )
        
        # Bot√µes de download
        col1, col2 = st.columns(2)
        
        with col1:
            # Download da tabela CSV
            csv_data = area_stats.to_csv(index=False)
            st.download_button(
                label="üìä Baixar Dados CSV",
                data=csv_data,
                file_name=f"lcz_area_analysis_{st.session_state.lcz_city_name or 'cidade'}.csv",
                mime="text/csv",
                help="Baixar dados de √°rea em formato CSV",
                use_container_width=True
            )
        
        with col2:
            # Download do gr√°fico HTML
            html_data = fig.to_html()
            st.download_button(
                label="üìà Baixar Gr√°fico HTML",
                data=html_data,
                file_name=f"lcz_area_chart_{st.session_state.lcz_city_name or 'cidade'}.html",
                mime="text/html",
                help="Baixar gr√°fico interativo em HTML",
                use_container_width=True
            )
        
        st.success("‚úÖ An√°lise de √°rea gerada com sucesso!")
        
    except Exception as e:
        st.error(f"‚ùå Erro ao gerar an√°lise de √°rea: {str(e)}")

def renderizar_mapa_folium():
    """Renderiza o mapa interativo com Folium usando dados da sess√£o."""
    
    try:
        # Usar dados da sess√£o
        gdf_lcz = st.session_state.lcz_data
        
        if gdf_lcz is None or gdf_lcz.empty:
            st.warning("‚ö†Ô∏è Dados LCZ n√£o encontrados na sess√£o.")
            return
        
        # Calcular centro do mapa
        bounds = gdf_lcz.total_bounds
        center_lat = (bounds[1] + bounds[3]) / 2
        center_lon = (bounds[0] + bounds[2]) / 2
        
        # Criar mapa base
        m = folium.Map(
            location=[center_lat, center_lon],
            zoom_start=11,
            tiles='OpenStreetMap'
        )
        
        # Definir cores para as classes LCZ
        cores_lcz = {
            'LCZ 1':  '#910613',  'LCZ 2':  '#D9081C',  'LCZ 3':  '#FF0A22',  'LCZ 4':  '#C54F1E',
            'LCZ 5':  '#FF6628',  'LCZ 6':  '#FF985E',  'LCZ 7':  '#FDED3F',  'LCZ 8':  '#BBBBBB',
            'LCZ 9':  '#FFCBAB',  'LCZ 10': '#565656',  'LCZ A':  '#006A18',  'LCZ B':  '#00A926',
            'LCZ C':  '#628432',  'LCZ D':  '#B5DA7F',  'LCZ E':  '#000000',  'LCZ F':  '#FCF7B1',
            'LCZ G':  '#656BFA'
        }
        
        # Adicionar camada GeoJSON
        for idx, row in gdf_lcz.iterrows():
            classe = row.get('zcl_classe', 'Desconhecida')
            cor = cores_lcz.get(classe, '#808080')
            area = row.get('area_km2', 0)
            
            folium.GeoJson(
                row.geometry,
                style_function=lambda feature, color=cor: {
                    'fillColor': color,
                    'color': 'black',
                    'weight': 1,
                    'fillOpacity': 0.7,
                    'opacity': 0.8
                },
                popup=folium.Popup(
                    f"""
                    <div style='width: 250px; font-family: Arial, sans-serif;'>
                        <h4 style='color: {cor}; margin-bottom: 10px;'>{classe}</h4>
                        <p><b>üìè √Årea:</b> {area:.2f} km¬≤</p>
                        <p><b>üìã Caracter√≠sticas:</b></p>
                        <p style='font-size: 12px;'>{row.get('descricao', 'Sem descri√ß√£o dispon√≠vel')}</p>
                        <p><b>üå°Ô∏è Efeito T√©rmico:</b></p>
                        <p style='font-size: 12px;'>{row.get('efeito_temp', 'N√£o dispon√≠vel')}</p>
                        <p><b>üèôÔ∏è Ilha de Calor:</b></p>
                        <p style='font-size: 12px;'>{row.get('ilha_calor', 'N√£o dispon√≠vel')}</p>
                        <p><b>üí° Interven√ß√£o Recomendada:</b></p>
                        <p style='font-size: 12px;'>{row.get('intervencao', 'N√£o dispon√≠vel')}</p>
                    </div>
                    """,
                    max_width=300
                )
            ).add_to(m)
        
        # Ajustar zoom aos dados
        m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])
        
        # Adicionar controles
        folium.LayerControl().add_to(m)
        
        # Instru√ß√µes de uso
        st.markdown("""
        #### üéØ Instru√ß√µes de Uso
        
        **Como interagir com o mapa:**
        1. üñ±Ô∏è **Clique nos pol√≠gonos** para ver informa√ß√µes detalhadas sobre cada zona clim√°tica
        2. üîç **Use os controles de zoom** para explorar diferentes escalas
        3. üó∫Ô∏è **Navegue pelo mapa** arrastando para explorar toda a √°rea
        4. üìä **Observe as cores** que representam diferentes classes LCZ
        """)
        
        # Exibir mapa
        map_data = st_folium(m, width="100%", height=800, returned_objects=["last_object_clicked"])
        
        # Exibir informa√ß√µes do clique
        if map_data['last_object_clicked']:
            st.info(f"üéØ √öltimo elemento clicado: {map_data['last_object_clicked']}")
        
        # Estat√≠sticas do mapa
        with st.expander("üìä Estat√≠sticas do Mapa", expanded=False):
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üèôÔ∏è Cidade", st.session_state.lcz_city_name or "N/A")
            
            with col2:
                st.metric("üé® Classes LCZ", len(gdf_lcz['zcl_classe'].unique()))
            
            with col3:
                st.metric("üìê Total de Pol√≠gonos", len(gdf_lcz))
            
            with col4:
                area_total = gdf_lcz['area_km2'].sum() if 'area_km2' in gdf_lcz.columns else 0
                st.metric("üìè √Årea Total", f"{area_total:.1f} km¬≤")
            
            # Distribui√ß√£o por classe
            if 'zcl_classe' in gdf_lcz.columns:
                st.markdown("**üìä Distribui√ß√£o por Classe LCZ:**")
                distribuicao = gdf_lcz['zcl_classe'].value_counts()
                st.bar_chart(distribuicao)
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar mapa: {str(e)}")
        st.info("üí° Tente gerar um novo mapa LCZ usando o gerador acima.")

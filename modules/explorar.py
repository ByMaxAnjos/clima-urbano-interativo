# modules/explorar.py

import streamlit as st
import folium
from streamlit_folium import st_folium
import geopandas as gpd
import pandas as pd
import os
import matplotlib.pyplot as plt
import matplotlib
import base64
from io import BytesIO
import tempfile
import rasterio
from utils.lcz4r import lcz_get_map, process_lcz_map, enhance_lcz_data, lcz_plot_map

# Configurar matplotlib para usar backend n√£o-interativo
matplotlib.use('Agg')

def renderizar_pagina():
    """Renderiza a p√°gina do m√≥dulo Explorar com organiza√ß√£o correta."""
    
    # Cabe√ßalho do m√≥dulo
    st.markdown("""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 2rem; border-radius: 15px; margin-bottom: 2rem; text-align: center;">
        <div style="display: flex; align-items: center; justify-content: center; gap: 1rem;">
            <img src="data:image/png;base64,{}" width="80" style="border-radius: 10px;">
            <div>
                <h1 style="color: white; margin: 0; font-size: 2.5rem;">üåç M√≥dulo Explorar</h1>
                <p style="color: rgba(255,255,255,0.9); margin: 0; font-size: 1.2rem;">
                    Gere e visualize mapas de Zonas Clim√°ticas Locais (LCZ) interativos
                </p>
            </div>
        </div>
    </div>
    """.format(get_logo_base64()), unsafe_allow_html=True)
    
    # 1. GERADOR DE MAPAS LCZ4r
    st.markdown("## üöÄ Gerador de Mapas LCZ4r")
    
    with st.expander("üîß Gerar Novo Mapa LCZ", expanded=False):
        st.markdown("""
        **LCZ4r** √© uma ferramenta avan√ßada para processamento de Zonas Clim√°ticas Locais que permite:
        
        - üåç Gerar mapas LCZ para qualquer cidade do mundo
        - üìä Processar dados de alta resolu√ß√£o automaticamente  
        - üó∫Ô∏è Visualizar resultados de forma interativa
        - üíæ Salvar dados para an√°lises futuras
        """)
        
        # Interface de entrada
        col1, col2 = st.columns([3, 1])
        with col1:
            cidade_nome = st.text_input(
                "üèôÔ∏è Nome da Cidade:",
                placeholder="Ex: S√£o Paulo, New York, London, Tokyo...",
                help="Digite o nome da cidade para gerar o mapa LCZ"
            )
        
        with col2:
            gerar_mapa = st.button("üöÄ Gerar Mapa LCZ", type="primary", width='stretch')
        
        # Processamento do mapa
        if gerar_mapa and cidade_nome:
            processar_mapa_lcz(cidade_nome)
    
    # 2. VISUALIZAR LCZ MAP COM MATPLOTLIB
    st.markdown("---")
    st.markdown("## üé® Visualizar LCZ Map")
    
    # Verificar se existe mapa gerado
    if verificar_dados_disponiveis():
        renderizar_secao_matplotlib()
    else:
        st.info("‚ÑπÔ∏è Gere um mapa LCZ primeiro para visualizar os resultados.")
    
    # 3. VISUALIZAR COM FOLIUM GEOJSON
    st.markdown("---")
    st.markdown("## üó∫Ô∏è Mapa Interativo")
    
    if verificar_dados_disponiveis():
        renderizar_mapa_folium()
    else:
        st.info("‚ÑπÔ∏è Gere um mapa LCZ primeiro para visualizar o mapa interativo.")
    
    # Instru√ß√µes finais
    st.markdown("---")
    st.markdown("""
    ### üí° Como Usar o M√≥dulo Explorar
    
    1. **üöÄ Gere um Mapa:** Use o gerador LCZ4r para criar um mapa para sua cidade de interesse
    2. **üé® Visualize:** Veja o mapa em formato cient√≠fico com matplotlib
    3. **üó∫Ô∏è Explore:** Interaja com o mapa usando a interface Folium
    4. **‚û°Ô∏è Pr√≥ximo passo:** V√° para "Investigar" para an√°lises detalhadas ou "Simular" para testar interven√ß√µes
    """)

def get_logo_base64():
    """Retorna o logo LCZ4r em base64."""
    try:
        logo_path = "assets/images/lcz4r_logo.png"
        if os.path.exists(logo_path):
            with open(logo_path, "rb") as f:
                return base64.b64encode(f.read()).decode()
    except:
        pass
    return ""

def processar_mapa_lcz(cidade_nome):
    """Processa e gera o mapa LCZ para a cidade especificada."""
    
    # Barra de progresso
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # Etapa 1: Download dos dados
        status_text.text("üì° Baixando dados LCZ globais...")
        progress_bar.progress(25)
        
        data, profile = lcz_get_map(cidade_nome)
        
        # Etapa 2: Processamento
        status_text.text("‚öôÔ∏è Processando dados LCZ...")
        progress_bar.progress(50)
        
        lcz_gdf = process_lcz_map(data, profile)
        
        # Etapa 3: Aprimoramento
        status_text.text("‚ú® Aprimorando dados...")
        progress_bar.progress(75)
        
        enhanced_gdf = enhance_lcz_data(lcz_gdf)
        
        # Etapa 4: Salvamento
        status_text.text("üíæ Salvando resultados...")
        progress_bar.progress(90)
        
        # Criar diret√≥rios se n√£o existirem
        os.makedirs("data", exist_ok=True)
        os.makedirs("LCZ4r_output", exist_ok=True)
        
        # Salvar GeoJSON
        enhanced_gdf.to_file("data/map_lcz.geojson", driver="GeoJSON")
        
        # Salvar dados raster para visualiza√ß√£o matplotlib
        with rasterio.open("LCZ4r_output/lcz_map.tif", 'w', **profile) as dst:
            dst.write(data, 1)
        
        # Finaliza√ß√£o
        progress_bar.progress(100)
        status_text.text("‚úÖ Processamento conclu√≠do!")
        
        # Exibir m√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Classes LCZ", len(enhanced_gdf['zcl_classe'].unique()))
        with col2:
            st.metric("Pol√≠gonos", len(enhanced_gdf))
        with col3:
            area_total = enhanced_gdf['area_km2'].sum() if 'area_km2' in enhanced_gdf.columns else 0
            st.metric("√Årea Total", f"{area_total:.1f} km¬≤")
        
        st.success(f"‚úÖ Mapa LCZ gerado com sucesso para {cidade_nome}!")
        st.info("üìç O novo mapa substituiu os dados anteriores e est√° sendo exibido abaixo.")
        
        # For√ßar rerun para atualizar as se√ß√µes
        st.rerun()
        
    except Exception as e:
        progress_bar.progress(0)
        status_text.text("")
        st.error(f"‚ùå Erro ao processar mapa: {str(e)}")

def verificar_dados_disponiveis():
    """Verifica se existem dados LCZ dispon√≠veis."""
    geojson_path = "data/map_lcz.geojson"
    raster_path = "LCZ4r_output/lcz_map.tif"
    return os.path.exists(geojson_path) and os.path.exists(raster_path)

def renderizar_secao_matplotlib():
    """Renderiza a se√ß√£o de visualiza√ß√£o com matplotlib."""
    
    st.markdown("### ‚öôÔ∏è Configura√ß√µes de Visualiza√ß√£o")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        titulo_personalizado = st.text_input(
            "üè∑Ô∏è T√≠tulo do Mapa (opcional):",
            placeholder="Ex: Zonas Clim√°ticas Locais - Rio de Janeiro",
            help="Deixe em branco para usar o t√≠tulo padr√£o"
        )
    
    with col2:
        alta_resolucao = st.checkbox(
            "üì∏ Alta Resolu√ß√£o",
            value=True,
            help="Gera imagem em 300 DPI para melhor qualidade"
        )
    
    # Bot√£o para gerar visualiza√ß√£o
    if st.button("üé® Gerar Visualiza√ß√£o", type="primary", width='stretch'):
        gerar_visualizacao_matplotlib(titulo_personalizado, alta_resolucao)

def gerar_visualizacao_matplotlib(titulo_personalizado=None, alta_resolucao=True):
    """Gera visualiza√ß√£o usando matplotlib e lcz_plot_map."""
    
    with st.spinner("Gerando visualiza√ß√£o de alta qualidade..."):
        try:
            # Carregar dados raster
            raster_path = "LCZ4r_output/lcz_map.tif"
            with rasterio.open(raster_path) as src:
                data = src.read(1)
                profile = src.profile
            
            # Configurar par√¢metros
            figsize = (16, 12) if alta_resolucao else (12, 8)
            dpi = 300 if alta_resolucao else 150
            
            # Configurar t√≠tulo
            titulo = titulo_personalizado if titulo_personalizado else "Mapa de Zonas Clim√°ticas Locais (LCZ)"
            
            # Gerar visualiza√ß√£o usando lcz_plot_map
            plt.figure(figsize=figsize, dpi=dpi)
            fig = lcz_plot_map(
                (data, profile),
                title=titulo,
                show_legend=True,
                isave=False  # N√£o salvar automaticamente
            )
            
            # Salvar em buffer para exibi√ß√£o
            buf = BytesIO()
            plt.savefig(buf, format='png', dpi=dpi, bbox_inches='tight', 
                       facecolor='white', edgecolor='none')
            buf.seek(0)
            
            # Exibir a imagem
            st.markdown("#### üñºÔ∏è Visualiza√ß√£o Gerada")
            st.image(buf, caption=titulo, width='stretch')
            
            # Salvar arquivo para download
            output_path = "LCZ4r_output/lcz_plot_map.png"
            plt.savefig(output_path, format='png', dpi=dpi, bbox_inches='tight',
                       facecolor='white', edgecolor='none')
            
            # Bot√µes de download
            col1, col2 = st.columns(2)
            
            with col1:
                # Download da imagem PNG
                with open(output_path, "rb") as f:
                    st.download_button(
                        label="üì∏ Baixar Imagem PNG",
                        data=f.read(),
                        file_name="lcz_plot_map.png",
                        mime="image/png",
                        help="Imagem do mapa LCZ em alta resolu√ß√£o",
                        width='stretch'
                    )
            
            with col2:
                # Download do arquivo raster
                raster_path = "LCZ4r_output/lcz_map.tif"
                if os.path.exists(raster_path):
                    with open(raster_path, "rb") as f:
                        st.download_button(
                            label="üó∫Ô∏è Baixar Raster TIF",
                            data=f.read(),
                            file_name="lcz_map.tif",
                            mime="image/tiff",
                            help="Arquivo raster do mapa LCZ para an√°lises GIS",
                            width='stretch'
                        )
            
            plt.close(fig)  # Liberar mem√≥ria
            st.success("‚úÖ Visualiza√ß√£o gerada com sucesso!")
            
        except Exception as e:
            st.error(f"‚ùå Erro ao gerar visualiza√ß√£o: {str(e)}")

def renderizar_mapa_folium():
    """Renderiza o mapa interativo com Folium."""
    
    try:
        # Carregar dados GeoJSON
        gdf_lcz = gpd.read_file("data/map_lcz.geojson")
        
        if gdf_lcz.empty:
            st.warning("‚ö†Ô∏è Dados LCZ n√£o encontrados.")
            return
        
        # Calcular centro do mapa
        bounds = gdf_lcz.total_bounds
        center_lat = (bounds[1] + bounds[3]) / 2
        center_lon = (bounds[0] + bounds[2]) / 2
        
        # Criar mapa base
        m = folium.Map(
            location=[center_lat, center_lon],
            zoom_start=11,
            tiles='OpenStreetMap'
        )
        
        # Definir cores para as classes LCZ
        cores_lcz = {
            'LCZ 1': '#8B0000', 'LCZ 2': '#CD5C5C', 'LCZ 3': '#F0E68C',
            'LCZ 4': '#FFD700', 'LCZ 5': '#FFA500', 'LCZ 6': '#FF8C00',
            'LCZ 7': '#FF6347', 'LCZ 8': '#FF4500', 'LCZ 9': '#DC143C',
            'LCZ 10': '#B22222', 'LCZ A': '#228B22', 'LCZ B': '#32CD32',
            'LCZ C': '#90EE90', 'LCZ D': '#98FB98', 'LCZ E': '#AFEEEE',
            'LCZ F': '#87CEEB', 'LCZ G': '#4682B4'
        }
        
        # Adicionar camada GeoJSON
        for idx, row in gdf_lcz.iterrows():
            classe = row.get('zcl_classe', 'Desconhecida')
            cor = cores_lcz.get(classe, '#808080')
            
            folium.GeoJson(
                    row.geometry,
                    style_function=lambda feature, color=cor: {
                        'fillColor': color,
                        'color': 'black',
                        'weight': 1,
                        'fillOpacity': 0.7,
                        'opacity': 0.8
                    },
                    popup=folium.Popup(
                        f"""
                        <div style='width: 200px'>
                        <h4>{classe}</h4>
                        <p><b>Caracter√≠sticas:</b></p>
                        <p>{row.get('descricao', 'Sem descri√ß√£o dispon√≠vel')}</p>
                        <p><b>Efeito T√©rmico:</b> {row.get('efeito_temp', 'N√£o dispon√≠vel')}</p>
                        <p><b>Ilha de Calor:</b> {row.get('ilha_calor', 'N√£o dispon√≠vel')}</p>
                        <p><b>Interven√ß√£o Recomendada:</b> {row.get('intervencao', 'N√£o dispon√≠vel')}</p>
                        </div>
                        """,
                        max_width=250
                    )
                ).add_to(m)
        
        # Ajustar zoom aos dados
        m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])
        
        # Adicionar controles
        folium.LayerControl().add_to(m)
        
        # Instru√ß√µes de uso
        st.markdown("""
        #### üéØ Instru√ß√µes
        
        **Como usar:**
        1. üñ±Ô∏è **Gerar novo mapa:** Use o gerador LCZ4r acima
        2. üìç **Selecionar camadas:** Ative/desative na barra lateral  
        3. ‚ú® **Explorar:** Clique nos elementos do mapa
        4. üîç **Zoom:** Use os controles para diferentes escalas
        """)
        
        # Exibir mapa
        map_data = st_folium(m, width=700, height=500, returned_objects=["last_object_clicked"])
        
        # Exibir informa√ß√µes do clique
        if map_data['last_object_clicked']:
            st.info(f"üéØ √öltimo elemento clicado: {map_data['last_object_clicked']}")
        
        # Estat√≠sticas do mapa
        with st.expander("üìä Estat√≠sticas do Mapa", expanded=False):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Classes LCZ", len(gdf_lcz['zcl_classe'].unique()))
            
            with col2:
                st.metric("Total de Pol√≠gonos", len(gdf_lcz))
            
            with col3:
                area_total = gdf_lcz['area_km2'].sum() if 'area_km2' in gdf_lcz.columns else 0
                st.metric("√Årea Total", f"{area_total:.1f} km¬≤")
            
            # Distribui√ß√£o por classe
            if 'zcl_classe' in gdf_lcz.columns:
                st.markdown("**Distribui√ß√£o por Classe LCZ:**")
                distribuicao = gdf_lcz['zcl_classe'].value_counts()
                st.bar_chart(distribuicao)
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar mapa: {str(e)}")
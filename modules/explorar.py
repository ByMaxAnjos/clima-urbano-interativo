# modules/explorar.py

import streamlit as st
import folium
from streamlit_folium import st_folium
from branca.colormap import linear
import pandas as pd
import geopandas as gpd
import os
import base64
from io import StringIO
import sys
import traceback

# Importar fun√ß√µes LCZ4r
try:
    from utils.lcz4r import lcz_get_map, process_lcz_map, enhance_lcz_data
except ImportError as e:
    st.error(f"Erro ao importar m√≥dulo LCZ4r: {e}")

def load_logo():
    """Carrega o logo LCZ4r em base64."""
    try:
        logo_path = "assets/images/lcz4r_logo.png"
        if os.path.exists(logo_path):
            with open(logo_path, "rb") as f:
                return base64.b64encode(f.read()).decode()
    except Exception:
        pass
    return None

def processar_cidade_lcz4r(nome_cidade, progress_bar=None, status_text=None):
    """
    Processa uma cidade usando LCZ4r e retorna o GeoDataFrame.
    
    Parameters
    ----------
    nome_cidade : str
        Nome da cidade para processamento
    progress_bar : streamlit.progress, optional
        Barra de progresso do Streamlit
    status_text : streamlit.empty, optional
        Texto de status do Streamlit
    
    Returns
    -------
    geopandas.GeoDataFrame or None
        GeoDataFrame com dados LCZ processados
    """
    try:
        if status_text:
            status_text.text("üîç Buscando cidade no OpenStreetMap...")
        if progress_bar:
            progress_bar.progress(10)
        
        # Download do mapa LCZ
        if status_text:
            status_text.text("üì° Baixando dados LCZ globais...")
        if progress_bar:
            progress_bar.progress(30)
            
        raster_data, raster_profile = lcz_get_map(city=nome_cidade)
        
        if status_text:
            status_text.text("üîÑ Processando dados raster...")
        if progress_bar:
            progress_bar.progress(60)
        
        # Processar para formato vetorial
        lcz_gdf = process_lcz_map(raster_data, raster_profile, factor=5)
        
        if status_text:
            status_text.text("‚ú® Aprimorando dados LCZ...")
        if progress_bar:
            progress_bar.progress(80)
        
        # Aprimorar dados
        enhanced_gdf = enhance_lcz_data(lcz_gdf)
        
        if status_text:
            status_text.text("üíæ Salvando arquivo GeoJSON...")
        if progress_bar:
            progress_bar.progress(90)
        
        # Salvar como map_lcz.geojson
        output_path = "data/map_lcz.geojson"
        enhanced_gdf.to_file(output_path, driver='GeoJSON')
        
        if status_text:
            status_text.text("‚úÖ Processamento conclu√≠do!")
        if progress_bar:
            progress_bar.progress(100)
        
        return enhanced_gdf
        
    except Exception as e:
        error_msg = f"Erro no processamento LCZ4r: {str(e)}"
        if status_text:
            status_text.error(error_msg)
        st.error(error_msg)
        st.error("Detalhes do erro:")
        st.code(traceback.format_exc())
        return None

def carregar_dados_lcz():
    """Carrega dados LCZ existentes ou usa dados de exemplo."""
    # Tentar carregar map_lcz.geojson primeiro
    lcz_path = "data/map_lcz.geojson"
    if os.path.exists(lcz_path):
        try:
            gdf = gpd.read_file(lcz_path)
            return gdf, "Dados LCZ personalizados"
        except Exception as e:
            st.warning(f"Erro ao carregar {lcz_path}: {e}")
    
    # Fallback para dados de exemplo
    exemplo_path = "data/sao_paulo_zcl.geojson"
    if os.path.exists(exemplo_path):
        try:
            gdf = gpd.read_file(exemplo_path)
            return gdf, "Dados de exemplo (S√£o Paulo)"
        except Exception as e:
            st.warning(f"Erro ao carregar dados de exemplo: {e}")
    
    return None, "Nenhum dado dispon√≠vel"

def renderizar_pagina(gdf_zcl, gdf_temp):
    """Renderiza a p√°gina do m√≥dulo Explorar com integra√ß√£o LCZ4r."""
    
    # Header com logo LCZ4r
    logo_b64 = load_logo()
    
    if logo_b64:
        st.markdown(f"""
        <div class="module-header" style="display: flex; align-items: center; gap: 20px; margin-bottom: 30px;">
            <img src="data:image/png;base64,{logo_b64}" style="width: 80px; height: 80px;">
            <div>
                <h1 style="margin: 0;">üåç M√≥dulo Explorar</h1>
                <p style="margin: 5px 0 0 0; color: #666;">Gere e visualize mapas de Zonas Clim√°ticas Locais personalizados com LCZ4r</p>
            </div>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="module-header">
            <h1>üåç M√≥dulo Explorar</h1>
            <p>Gere e visualize mapas de Zonas Clim√°ticas Locais personalizados com LCZ4r</p>
        </div>
        """, unsafe_allow_html=True)

    # Se√ß√£o LCZ4r Generator
    st.markdown("### üöÄ Gerador de Mapas LCZ4r")
    
    with st.expander("üîß Gerar Novo Mapa LCZ", expanded=False):
        st.markdown("""
        **LCZ4r** √© uma ferramenta avan√ßada para processamento de Zonas Clim√°ticas Locais que permite:
        - üåç Gerar mapas LCZ para qualquer cidade do mundo
        - üìä Processar dados de alta resolu√ß√£o automaticamente
        - üó∫Ô∏è Visualizar resultados de forma interativa
        - üíæ Salvar dados para an√°lises futuras
        """)
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            nome_cidade = st.text_input(
                "üèôÔ∏è Nome da Cidade:",
                placeholder="Ex: S√£o Paulo, New York, London, Tokyo...",
                help="Digite o nome de qualquer cidade do mundo"
            )
        
        with col2:
            processar_button = st.button(
                "üöÄ Gerar Mapa LCZ",
                type="primary",
                use_container_width=True
            )
        
        if processar_button and nome_cidade:
            with st.spinner("Processando dados LCZ4r..."):
                # Containers para progresso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Processar cidade
                novo_gdf = processar_cidade_lcz4r(nome_cidade, progress_bar, status_text)
                
                if novo_gdf is not None:
                    st.success(f"‚úÖ Mapa LCZ gerado com sucesso para {nome_cidade}!")
                    st.info("O novo mapa substituiu os dados anteriores e est√° sendo exibido abaixo.")
                    
                    # Atualizar dados para visualiza√ß√£o
                    gdf_zcl = novo_gdf
                    
                    # Mostrar estat√≠sticas
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Classes LCZ", len(novo_gdf['zcl_classe'].unique()))
                    with col2:
                        st.metric("Pol√≠gonos", len(novo_gdf))
                    with col3:
                        area_total = novo_gdf['area_km2'].sum() if 'area_km2' in novo_gdf.columns else 0
                        st.metric("√Årea Total", f"{area_total:.1f} km¬≤")
                else:
                    st.error("‚ùå Falha no processamento. Verifique o nome da cidade e tente novamente.")
        
        elif processar_button and not nome_cidade:
            st.warning("‚ö†Ô∏è Por favor, digite o nome de uma cidade.")

    # Carregar dados LCZ atuais
    gdf_zcl_atual, fonte_dados = carregar_dados_lcz()
    if gdf_zcl_atual is not None:
        gdf_zcl = gdf_zcl_atual

    # Painel de controle na barra lateral
    with st.sidebar:
        st.markdown("### üéõÔ∏è Controles de Visualiza√ß√£o")
        
        # Status dos dados
        st.markdown(f"**üìä Dados Ativos:** {fonte_dados}")
        
        st.markdown("### üóÇÔ∏è Camadas de Dados")
        
        # Controles de camadas com descri√ß√µes
        mostrar_zcl = st.checkbox(
            "üèòÔ∏è Zonas Clim√°ticas Locais (ZCL)", 
            value=True,
            help="Mostra a classifica√ß√£o do uso do solo urbano segundo Stewart & Oke (2012)"
        )
        
        mostrar_temp = st.checkbox(
            "üå°Ô∏è Temperatura da Superf√≠cie", 
            value=False,
            help="Dados de temperatura obtidos por sensoriamento remoto"
        )
        
        # Informa√ß√µes sobre os dados
        if mostrar_zcl and gdf_zcl is not None and not gdf_zcl.empty:
            st.markdown("### ‚ÑπÔ∏è Informa√ß√µes dos Dados")
            
            classes_unicas = gdf_zcl['zcl_classe'].unique()
            st.info(f"""
            **Classes LCZ Presentes:**
            {chr(10).join([f"- {classe}" for classe in sorted(classes_unicas)])}
            """)
            
        if mostrar_temp and gdf_temp is not None and not gdf_temp.empty:
            temp_min = gdf_temp['temperatura_c'].min()
            temp_max = gdf_temp['temperatura_c'].max()
            st.info(f"""
            **Temperatura:**
            - M√≠nima: {temp_min:.1f}¬∞C
            - M√°xima: {temp_max:.1f}¬∞C
            - Fonte: Landsat 8 TIRS
            """)

    # √Årea principal do mapa
    col1, col2 = st.columns([4, 1])
    
    with col1:
        if gdf_zcl is not None and not gdf_zcl.empty:
            # Configura√ß√£o do mapa base
            bounds = gdf_zcl.total_bounds
            center_lat = (bounds[1] + bounds[3]) / 2
            center_lon = (bounds[0] + bounds[2]) / 2
            map_center = [center_lat, center_lon]
            
            m = folium.Map(
                location=map_center, 
                zoom_start=11, 
                tiles="CartoDB positron",
                prefer_canvas=True
            )

            # Adicionar camada de ZCL se selecionada
            if mostrar_zcl:
                # Mapeamento de cores para as classes de ZCL (padr√£o LCZ4r)
                zcl_color_map = {
                    'LCZ 1': '#910613',    # Compact high-rise
                    'LCZ 2': '#D9081C',    # Compact midrise
                    'LCZ 3': '#FF0A22',    # Compact low-rise
                    'LCZ 4': '#C54F1E',    # Open high-rise
                    'LCZ 5': '#FF6628',    # Open midrise
                    'LCZ 6': '#FF985E',    # Open low-rise
                    'LCZ 7': '#FDED3F',    # Lightweight low-rise
                    'LCZ 8': '#BBBBBB',    # Large low-rise
                    'LCZ 9': '#FFCBAB',    # Sparsely built
                    'LCZ 10': '#565656',   # Heavy industry
                    'LCZ A': '#006A18',    # Dense trees
                    'LCZ B': '#00A926',    # Scattered trees
                    'LCZ C': '#628432',    # Bush, scrub
                    'LCZ D': '#B5DA7F',    # Low plants
                    'LCZ E': '#000000',    # Bare rock or paved
                    'LCZ F': '#FCF7B1',    # Bare soil or sand
                    'LCZ G': '#656BFA'     # Water
                }
                
                # Adiciona cada pol√≠gono de ZCL ao mapa
                for _, row in gdf_zcl.iterrows():
                    zcl_classe = row.get('zcl_classe', 'Desconhecida')
                    cor = zcl_color_map.get(zcl_classe, '#gray')
                    
                    # Informa√ß√µes para tooltip e popup
                    descricao = row.get('descricao', 'Sem descri√ß√£o')
                    efeito_temp = row.get('efeito_temp', 'Sem informa√ß√£o')
                    area_info = f"√Årea: {row.get('area_km2', 0):.2f} km¬≤" if 'area_km2' in row else ""
                    
                    folium.GeoJson(
                        row.geometry,
                        style_function=lambda feature, color=cor: {
                            'fillColor': color,
                            'color': 'black',
                            'weight': 1,
                            'fillOpacity': 0.7,
                            'opacity': 0.8
                        },
                        tooltip=folium.Tooltip(
                            f"""
                            <b>Zona Clim√°tica:</b> {zcl_classe}<br>
                            <b>Descri√ß√£o:</b> {descricao}<br>
                            {area_info}
                            """,
                            sticky=True
                        ),
                        popup=folium.Popup(
                            f"""
                            <div style='width: 300px'>
                            <h4>{zcl_classe}</h4>
                            <p><b>Caracter√≠sticas:</b></p>
                            <p>{descricao}</p>
                            <p><b>Efeito T√©rmico:</b></p>
                            <p>{efeito_temp}</p>
                            {f'<p><b>{area_info}</b></p>' if area_info else ''}
                            </div>
                            """,
                            max_width=350
                        )
                    ).add_to(m)

            # Adicionar camada de temperatura se selecionada
            if mostrar_temp and gdf_temp is not None and not gdf_temp.empty:
                # Criar mapa de cores para temperatura
                temp_min = gdf_temp['temperatura_c'].min()
                temp_max = gdf_temp['temperatura_c'].max()
                
                colormap = linear.YlOrRd_09.scale(temp_min, temp_max)
                colormap.caption = 'Temperatura da Superf√≠cie (¬∞C)'
                m.add_child(colormap)

                # Adiciona cada c√©lula de temperatura ao mapa
                for _, row in gdf_temp.iterrows():
                    temp_valor = row['temperatura_c']
                    
                    folium.GeoJson(
                        row.geometry,
                        style_function=lambda feature, temp=temp_valor: {
                            'fillColor': colormap(temp),
                            'color': 'none',
                            'weight': 0,
                            'fillOpacity': 0.6,
                        },
                        tooltip=folium.Tooltip(
                            f"<b>Temperatura:</b> {temp_valor:.1f}¬∞C",
                            sticky=True
                        )
                    ).add_to(m)

            # Adicionar controle de camadas
            folium.LayerControl().add_to(m)
            
            # Renderizar o mapa
            map_data = st_folium(
                m, 
                width=None, 
                height=600, 
                returned_objects=["last_object_clicked"],
                key="explorar_map"
            )
        else:
            st.warning("‚ö†Ô∏è Nenhum dado LCZ dispon√≠vel. Use o gerador LCZ4r acima para criar um mapa.")
            st.info("üí° Dica: Digite o nome de uma cidade e clique em 'Gerar Mapa LCZ' para come√ßar.")

    with col2:
        st.markdown("### üéØ Instru√ß√µes")
        st.markdown("""
        **Como usar:**
        1. üöÄ **Gerar novo mapa:** Use o gerador LCZ4r acima
        2. üóÇÔ∏è **Selecionar camadas:** Ative/desative na barra lateral
        3. üñ±Ô∏è **Explorar:** Clique nos elementos do mapa
        4. üîç **Zoom:** Use os controles para diferentes escalas
        """)
        
        # Mostrar informa√ß√µes do √∫ltimo clique
        if 'map_data' in locals() and map_data and map_data.get("last_object_clicked"):
            st.markdown("### üìç √öltimo Clique")
            clicked_data = map_data["last_object_clicked"]
            if clicked_data:
                st.json(clicked_data)
        
        # Estat√≠sticas r√°pidas
        st.markdown("### üìä Estat√≠sticas R√°pidas")
        
        if gdf_zcl is not None and not gdf_zcl.empty:
            num_zcl = len(gdf_zcl['zcl_classe'].unique())
            st.metric("Classes de ZCL", num_zcl)
            
            if 'area_km2' in gdf_zcl.columns:
                area_total = gdf_zcl['area_km2'].sum()
                st.metric("√Årea Total", f"{area_total:.1f} km¬≤")
            
        if gdf_temp is not None and not gdf_temp.empty:
            temp_media = gdf_temp['temperatura_c'].mean()
            st.metric("Temp. M√©dia", f"{temp_media:.1f}¬∞C")

    # Se√ß√£o de legenda expandida
    with st.expander("üìñ Legenda Detalhada das Zonas Clim√°ticas Locais"):
        st.markdown("""
        ### Zonas Constru√≠das (Built Types)
        - **LCZ 1 - Compact high-rise:** Edif√≠cios altos e compactos
        - **LCZ 2 - Compact midrise:** Edif√≠cios de altura m√©dia e compactos  
        - **LCZ 3 - Compact low-rise:** Edif√≠cios baixos e compactos
        - **LCZ 4 - Open high-rise:** Edif√≠cios altos com espa√ßos abertos
        - **LCZ 5 - Open midrise:** Edif√≠cios de altura m√©dia com espa√ßos abertos
        - **LCZ 6 - Open low-rise:** Edif√≠cios baixos com espa√ßos abertos
        - **LCZ 7 - Lightweight low-rise:** Edif√≠cios baixos e leves
        - **LCZ 8 - Large low-rise:** Edif√≠cios baixos e extensos
        - **LCZ 9 - Sparsely built:** Constru√ß√µes esparsas
        - **LCZ 10 - Heavy industry:** Ind√∫stria pesada
        
        ### Cobertura Natural (Land Cover Types)
        - **LCZ A - Dense trees:** √Årvores densas
        - **LCZ B - Scattered trees:** √Årvores esparsas
        - **LCZ C - Bush, scrub:** Arbustos e vegeta√ß√£o baixa
        - **LCZ D - Low plants:** Plantas baixas
        - **LCZ E - Bare rock or paved:** Rocha nua ou pavimentado
        - **LCZ F - Bare soil or sand:** Solo nu ou areia
        - **LCZ G - Water:** Corpos d'√°gua
        """)

    # Informa√ß√µes sobre LCZ4r
    with st.expander("‚ÑπÔ∏è Sobre o LCZ4r"):
        st.markdown("""
        ### üî¨ LCZ4r - Local Climate Zone for R
        
        **LCZ4r** √© uma ferramenta cient√≠fica desenvolvida para processamento automatizado de Zonas Clim√°ticas Locais (LCZ). 
        
        **Caracter√≠sticas principais:**
        - üåç **Cobertura global:** Processa qualquer cidade do mundo
        - üìä **Alta resolu√ß√£o:** Dados de 100m de resolu√ß√£o espacial
        - üî¨ **Base cient√≠fica:** Baseado na metodologia Stewart & Oke (2012)
        - üöÄ **Processamento autom√°tico:** Download e processamento em tempo real
        - üíæ **Formato padr√£o:** Sa√≠da em GeoJSON para m√°xima compatibilidade
        
        **Fonte de dados:** 
        - Mapa global LCZ v3 (Demuzere et al., 2022)
        - Dispon√≠vel em: https://zenodo.org/records/8419340
        
        **Desenvolvido por:** Max Anjos  
        **GitHub:** https://github.com/ByMaxAnjos/LCZ4r
        """)

    # Dicas de uso
    st.markdown("""
    ---
    ### üí° Dicas de Uso
    
    - **üåç Explore globalmente:** Teste diferentes cidades ao redor do mundo
    - **üîÑ Compare dados:** Gere mapas para cidades similares e compare padr√µes
    - **üìä Combine camadas:** Ative tanto ZCL quanto temperatura para an√°lises integradas
    - **üîç Analise escalas:** Use zoom para estudar desde regi√µes metropolitanas at√© quarteir√µes
    - **‚û°Ô∏è Pr√≥ximo passo:** V√° para "Investigar" para an√°lises detalhadas ou "Simular" para testar interven√ß√µes
    """)


    # Se√ß√£o para Visualizar LCZ Map
    st.markdown("---")
    from utils.lcz_visualizer import renderizar_secao_visualizar_lcz
    renderizar_secao_visualizar_lcz()

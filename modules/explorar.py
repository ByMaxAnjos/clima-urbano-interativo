# modules/explorar.py

import streamlit as st
import folium
from streamlit_folium import st_folium
import geopandas as gpd
import pandas as pd
import os
import matplotlib.pyplot as plt
import matplotlib
import base64
from io import BytesIO
import tempfile
import rasterio
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
import time
# Assumindo que utils.lcz4r est√° no caminho
from utils.lcz4r import lcz_get_map, process_lcz_map, enhance_lcz_data, lcz_plot_map, lcz_cal_area, lcz_area_analysis_report

# Configurar matplotlib para usar backend n√£o-interativo
matplotlib.use('Agg')

# --- Fun√ß√µes de Gerenciamento de Sess√£o (Mantidas Robustas) ---

def init_session_state():
    """Inicializa o estado da sess√£o com valores padr√£o e valida√ß√£o."""
    current_version = "1.3.0" # Vers√£o atualizada para refletir as melhorias
    
    if 'lcz_schema_version' not in st.session_state:
        st.session_state.lcz_schema_version = current_version
    elif st.session_state.lcz_schema_version != current_version:
        clear_lcz_session_data()
        st.session_state.lcz_schema_version = current_version
    
    session_defaults = {
        'lcz_data': None,
        'lcz_raster_data': None,
        'lcz_raster_profile': None,
        'lcz_city_name': None,
        'lcz_processing_success': False,
        'lcz_success_message': "",
        'lcz_error_message': "",
        'lcz_last_update': None,
        'lcz_data_size_mb': 0.0,
        'lcz_area_stats': None,
        'lcz_plot_data': None,
        'lcz_area_summary': None, # Adicionado
        'lcz_validation_result': None,
        'lcz_session_id': None
    }
    
    for key, default_value in session_defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default_value
    
    if st.session_state.lcz_session_id is None:
        import uuid
        st.session_state.lcz_session_id = str(uuid.uuid4())[:8]
    
    validate_session_data()

def validate_session_data():
    """Valida a integridade dos dados na sess√£o e corrige inconsist√™ncias."""
    try:
        # Simplifica√ß√£o e foco na GeoDataFrame principal
        if st.session_state.lcz_data is not None:
            if not hasattr(st.session_state.lcz_data, 'geometry'):
                st.warning("‚ö†Ô∏è Dados LCZ corrompidos detectados. Limpando sess√£o...")
                clear_lcz_session_data()
                return
            
            import sys
            data_size = sys.getsizeof(st.session_state.lcz_data) / (1024 * 1024)
            st.session_state.lcz_data_size_mb = round(data_size, 2)
            
            # Checagem de dados antigos
            if st.session_state.lcz_last_update:
                from datetime import datetime, timedelta
                # Padronizar a convers√£o para datetime
                if isinstance(st.session_state.lcz_last_update, str):
                    last_update = datetime.fromisoformat(st.session_state.lcz_last_update)
                else:
                    last_update = st.session_state.lcz_last_update
                
                # Aviso de dados antigos
                if datetime.now() - last_update > timedelta(hours=1):
                    pass # Remo√ß√£o do st.info para n√£o poluir, a m√©trica de tempo no feedback j√° informa
        
        # Limite de mem√≥ria (Aviso, n√£o bloqueio)
        if st.session_state.lcz_data_size_mb > 100:
            st.warning("‚ö†Ô∏è Uso de mem√≥ria alto detectado (> 100MB). Cidades muito grandes podem causar instabilidade.")
            
    except Exception as e:
        # Erro fatal na valida√ß√£o
        st.error(f"‚ùå Erro na valida√ß√£o da sess√£o: {str(e)}")
        clear_lcz_session_data()

def clear_lcz_session_data():
    """Limpa dados LCZ da sess√£o de forma segura e completa."""
    keys_to_clear = [
        'lcz_data', 'lcz_raster_data', 'lcz_raster_profile',
        'lcz_city_name', 'lcz_processing_success', 'lcz_success_message',
        'lcz_error_message', 'lcz_last_update', 'lcz_data_size_mb',
        'lcz_area_stats', 'lcz_plot_data', 'lcz_area_summary', 'lcz_validation_result'
    ]
    
    for key in keys_to_clear:
        if key in st.session_state:
            st.session_state[key] = None if key != 'lcz_processing_success' else False
    
    st.session_state.lcz_processing_success = False
    st.session_state.lcz_success_message = ""
    st.session_state.lcz_error_message = ""
    st.session_state.lcz_data_size_mb = 0.0
    
    import gc
    gc.collect()

def get_session_info():
    """Retorna informa√ß√µes sobre o estado atual da sess√£o."""
    # (Manter o corpo original da fun√ß√£o)
    info = {
        'session_id': st.session_state.get('lcz_session_id', 'N/A'),
        'schema_version': st.session_state.get('lcz_schema_version', 'N/A'),
        'has_data': st.session_state.lcz_data is not None,
        'has_raster': st.session_state.lcz_raster_data is not None,
        'city_name': st.session_state.lcz_city_name or 'N/A',
        'data_size_mb': st.session_state.lcz_data_size_mb,
        'last_update': st.session_state.lcz_last_update,
        'processing_success': st.session_state.lcz_processing_success,
        'success_message': st.session_state.lcz_success_message,
        'error_message': st.session_state.lcz_error_message
    }
    
    return info

def update_session_timestamp():
    """Atualiza o timestamp da √∫ltima modifica√ß√£o dos dados."""
    from datetime import datetime
    st.session_state.lcz_last_update = datetime.now().isoformat()

def save_lcz_data_to_session(data, profile, city_name, enhanced_gdf):
    """Salva dados LCZ na sess√£o de forma segura e organizada."""
    try:
        # Salvar dados principais
        st.session_state.lcz_raster_data = data
        st.session_state.lcz_raster_profile = profile
        st.session_state.lcz_city_name = city_name
        st.session_state.lcz_data = enhanced_gdf
        
        # Resetar dados de an√°lise para que sejam recalculados com a nova GeoDataFrame
        st.session_state.lcz_area_stats = None
        st.session_state.lcz_plot_data = None
        st.session_state.lcz_area_summary = None
        
        # Atualizar status
        st.session_state.lcz_processing_success = True
        st.session_state.lcz_success_message = f"‚úÖ Mapa LCZ gerado com sucesso para **{city_name}**!"
        st.session_state.lcz_error_message = ""
        
        # Atualizar timestamp
        update_session_timestamp()
        
        # Validar dados salvos
        validate_session_data()
        
        return True
        
    except Exception as e:
        st.session_state.lcz_error_message = f"Erro ao salvar dados na sess√£o: {str(e)}"
        st.session_state.lcz_processing_success = False
        return False

@st.cache_data
def get_logo_base64():
    """Retorna o logo LCZ4r em base64 com cache."""
    try:
        logo_path = "assets/lcz4r_logo.png"
        if os.path.exists(logo_path):
            with open(logo_path, "rb") as f:
                return base64.b64encode(f.read()).decode()
    except:
        pass
    return ""

# --- Fun√ß√µes de Renderiza√ß√£o Aprimoradas ---

def renderizar_pagina():
    """
    Renderiza a p√°gina do m√≥dulo Explorar com foco did√°tico,
    tratamento robusto de erros e monitoramento de sess√£o.
    """
    try:
        init_session_state()
        
        # 1. Cabe√ßalho
        renderizar_cabecalho_modulo()
        
        # 2. Feedback Persistente e Status
        renderizar_feedback_usuario()
        
        # 3. Conceitos Did√°ticos LCZ (Sempre vis√≠vel)
        renderizar_conceitos_lcz()
        
        # 4. Gerador de Mapas
        st.markdown("---")
        st.markdown("## üöÄ Gerador de Mapas LCZ4r")
        try:
            renderizar_gerador_lcz()
        except Exception as e:
            st.error(f"‚ùå Erro no gerador LCZ: {str(e)}")
            with st.expander("üîß Detalhes t√©cnicos"):
                st.code(f"Erro: {type(e).__name__}\nDetalhes: {str(e)}")
        
        # 5. Se√ß√µes de An√°lise (Condicionais)
        if st.session_state.lcz_data is not None and st.session_state.lcz_processing_success:
            renderizar_secoes_analise()
        else:
            renderizar_instrucoes_iniciais()
        
        # 6. Ajuda e Debug
        renderizar_secao_ajuda()
        
        if st.sidebar.checkbox("üîß Modo Debug", help="Exibir informa√ß√µes t√©cnicas da sess√£o"):
            renderizar_debug_sessao()
            
    except Exception as e:
        # Tratamento de erro global
        st.error("‚ùå **Erro cr√≠tico no m√≥dulo Explorar**")
        st.error(f"Detalhes: {str(e)}")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ Reiniciar M√≥dulo", type="primary"):
                clear_lcz_session_data()
                st.rerun()
        
        with col2:
            if st.button("üóëÔ∏è Limpar Sess√£o Completa"):
                for key in list(st.session_state.keys()):
                    if key.startswith('lcz_'):
                        del st.session_state[key]
                st.rerun()
        
        with st.expander("üîß Informa√ß√µes T√©cnicas"):
            st.code(f"""
Tipo do erro: {type(e).__name__}
Detalhes: {str(e)}
Sess√£o ID: {st.session_state.get('lcz_session_id', 'N/A')}
Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}
            """)

def renderizar_cabecalho_modulo():
    """Renderiza o cabe√ßalho visual do m√≥dulo com foco did√°tico."""
    
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, #007bff 0%, #00b4d8 100%); 
                padding: 2rem; border-radius: 15px; margin-bottom: 1.5rem; text-align: center;">
        <div style="display: flex; align-items: center; justify-content: center; gap: 1rem;">
            <img src="data:image/png;base64,{get_logo_base64()}" width="80" style="border-radius: 10px;">
            <div>
                <h1 style="color: white; margin: 0; font-size: 2.8rem; font-weight: 700;">
                    üó∫Ô∏è Explorar o Clima Urbano
                </h1>
                <p style="color: rgba(255,255,255,0.9); margin: 0; font-size: 1.3rem;">
                    Gera√ß√£o e An√°lise Interativa de Zonas Clim√°ticas Locais (LCZ)
                </p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
def renderizar_conceitos_lcz():
    """Nova se√ß√£o did√°tica para explicar o que s√£o LCZ."""
    
    st.markdown("## üß† Conceitos Fundamentais: LCZ")
    
    with st.expander("O que s√£o Zonas Clim√°ticas Locais (LCZ)?", expanded=False):
        st.markdown("""
        As **Zonas Clim√°ticas Locais (LCZ)** s√£o um sistema de classifica√ß√£o padronizado globalmente,
        utilizado para caracterizar ambientes pr√≥ximos √† superf√≠cie terrestre com propriedades
        t√©rmicas e f√≠sicas uniformes.
        
        Elas s√£o cruciais para o estudo de **Ilhas de Calor Urbanas (ICU)**, pois cada classe LCZ
        possui um potencial diferente para reter ou dissipar calor.
        
        ### üìã Classifica√ß√£o Resumida
        
        | Categoria | Classes (Ex.) | Caracter√≠sticas | Efeito T√©rmico T√≠pico |
        | :---: | :---: | :---: | :---: |
        | **Urbana** | LCZ 1 (Densamente constru√≠da) | Pr√©dios altos, superf√≠cies imperme√°veis | Reten√ß√£o de calor, ICU Intensa |
        | | LCZ 6 (Baixa e Aberta) | Casas t√©rreas, mais vegeta√ß√£o | Reten√ß√£o moderada, ICU Moderada |
        | **Natural** | LCZ A (√Årvores Densas) | Florestas, parques grandes | Resfriamento por evapotranspira√ß√£o |
        | | LCZ D (Baixa Vegeta√ß√£o) | Campos, agricultura | Resfriamento moderado/aquecimento diurno |
        
        Use o mapa abaixo para ver a distribui√ß√£o dessas classes na sua cidade!
        """)

def renderizar_feedback_usuario():
    """Renderiza feedback persistente e status da sess√£o para o usu√°rio."""
    
    if st.session_state.lcz_processing_success and st.session_state.lcz_success_message:
        st.success(st.session_state.lcz_success_message)
    
    if st.session_state.lcz_error_message:
        st.error(f"‚ùå **√öltimo erro:** {st.session_state.lcz_error_message}")
        
        col1, col2 = st.columns([3, 1])
        with col2:
            if st.button("üóëÔ∏è Limpar Erro", key="clear_error_btn", help="Remove a mensagem de erro"):
                st.session_state.lcz_error_message = ""
                st.rerun()
    
    # Status da sess√£o (compacto)
    if st.session_state.lcz_data is not None:
        session_info = get_session_info()
        st.markdown("---")
        st.markdown("#### üöÄ Status do Mapa Carregado")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üèôÔ∏è Cidade", 
                session_info['city_name'],
                help="Nome da cidade analisada"
            )
        
        with col2:
            st.metric(
                "üíæ Mem√≥ria", 
                f"{session_info['data_size_mb']:.1f} MB",
                help="Uso de mem√≥ria da GeoDataFrame principal"
            )
        
        with col3:
            # L√≥gica de c√°lculo de tempo mantida
            time_str = "N/A"
            if session_info['last_update']:
                from datetime import datetime
                try:
                    if isinstance(session_info['last_update'], str):
                        last_update = datetime.fromisoformat(session_info['last_update'])
                    else:
                        last_update = session_info['last_update']
                    
                    time_diff = datetime.now() - last_update
                    if time_diff.total_seconds() < 60:
                        time_str = "Agora"
                    elif time_diff.total_seconds() < 3600:
                        time_str = f"{int(time_diff.total_seconds()//60)} min atr√°s"
                    else:
                        time_str = f"{int(time_diff.total_seconds()//3600)} h atr√°s"
                except:
                    pass
            
            st.metric("üïí √öltima Gera√ß√£o", time_str, help="√öltima atualiza√ß√£o dos dados LCZ")
        
        with col4:
            area_total = st.session_state.lcz_data['area_km2'].sum() if 'area_km2' in st.session_state.lcz_data.columns else 0
            st.metric("üìè √Årea Total", f"{area_total:.1f} km¬≤", help="√Årea total coberta pelo mapa LCZ")
        st.markdown("---")

def renderizar_instrucoes_iniciais():
    """Renderiza instru√ß√µes did√°ticas quando n√£o h√° dados carregados."""
    
    st.info("‚ÑπÔ∏è **Pronto para come√ßar?** Gere seu primeiro mapa LCZ para liberar as ferramentas de an√°lise!")
    
    with st.expander("üìñ Guia R√°pido de Gera√ß√£o do Mapa LCZ", expanded=True):
        st.markdown("""
        ### 1. üèôÔ∏è Selecione sua Cidade
        
        - **Busca Global:** Use o campo "Nome da Cidade" para buscar qualquer cidade do mundo.
        - **Dica:** Para resultados mais precisos, use o formato **"Cidade, Pa√≠s"** (Ex: *S√£o Paulo, Brazil*).
        
        ### 2. ‚è≥ Gere o Mapa
        
        - **Clique em "üöÄ Gerar Mapa LCZ":** O sistema ir√° geocodificar, baixar e processar os dados globais.
        - **Paci√™ncia:** O processamento pode levar de 2 a 5 minutos dependendo do tamanho da √°rea e da conex√£o. Uma barra de progresso detalhada ser√° exibida.
        
        ### 3. üìä Explore e Analise
        
        Ap√≥s o sucesso, novas se√ß√µes aparecer√£o:
        - **Visualiza√ß√£o:** Veja o mapa LCZ em formato cient√≠fico.
        - **An√°lise de √Årea:** Explore gr√°ficos de distribui√ß√£o de √°rea urbana vs. natural.
        - **Mapa Interativo (Folium):** Clique nos pol√≠gonos para ver as propriedades de cada LCZ e seu impacto no clima urbano.
        """)

def renderizar_secoes_analise():
    """Renderiza as se√ß√µes de an√°lise quando h√° dados dispon√≠veis."""
    
    st.markdown("---")
    st.markdown(f"## üîé An√°lise LCZ para {st.session_state.lcz_city_name}")
    
    tab_matplot, tab_area, tab_folium = st.tabs(
        ["üé® Visualiza√ß√£o Cient√≠fica", "üìä An√°lise de √Årea", "üó∫Ô∏è Mapa Interativo"]
    )
    
    # 1. Visualiza√ß√£o com Matplotlib (Cient√≠fica)
    with tab_matplot:
        try:
            renderizar_secao_matplotlib()
        except Exception as e:
            st.error(f"‚ùå Erro na visualiza√ß√£o Matplotlib. Detalhes: {str(e)}")

    # 2. An√°lise de √Årea (Did√°tica/Estat√≠stica)
    with tab_area:
        try:
            renderizar_secao_calculo_area()
        except Exception as e:
            st.error(f"‚ùå Erro na an√°lise de √°rea. Detalhes: {str(e)}")
            st.session_state.lcz_area_stats = None
            st.session_state.lcz_plot_data = None
            st.session_state.lcz_area_summary = None
            if st.button("üîÑ Recalcular An√°lise de √Årea", key="recal_area_fail"):
                st.rerun()
                
    # 3. Mapa Interativo Folium (Explora√ß√£o)
    with tab_folium:
        try:
            renderizar_mapa_folium()
        except Exception as e:
            st.error(f"‚ùå Erro no mapa interativo. Detalhes: {str(e)}")
            if st.button("üîÑ Recarregar Mapa Interativo", key="recal_folium_fail"):
                st.rerun()

def renderizar_secao_ajuda():
    """Renderiza se√ß√£o de ajuda e instru√ß√µes finais."""
    
    st.markdown("---")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üí° Pr√≥ximos Passos e Oportunidades")
        st.markdown("""
        O mapa LCZ √© a base para diversas an√°lises de clima urbano:
        1. **üå°Ô∏è Avalie a ICU:** Analise a √°rea das LCZ mais cr√≠ticas (LCZ 1-3) para entender a intensidade da Ilha de Calor.
        2. **üå≥ Planeje Interven√ß√µes:** Identifique √°reas com LCZ de baixa reten√ß√£o (LCZ A, B, D) para expandir o resfriamento.
        3. **‚û°Ô∏è M√≥dulos Avan√ßados:** Use os dados gerados aqui nos m√≥dulos "Investigar" (para an√°lises mais profundas) ou "Simular" (para testar planos de mitiga√ß√£o).
        """)
    
    with col2:
        st.markdown("### üÜò Manuten√ß√£o da Sess√£o")
        
        if st.button("üîÑ Limpar Dados LCZ e Reiniciar", help="Limpa apenas os dados do mapa LCZ, mantendo a vers√£o e ID da sess√£o.", use_container_width=True):
            clear_lcz_session_data()
            st.success("‚úÖ Dados LCZ limpos e m√≥dulo reiniciado!")
            st.rerun()
        
        if st.button("üìÑ Gerar Relat√≥rio de Sess√£o", help="Mostra informa√ß√µes t√©cnicas da sess√£o", use_container_width=True):
            info = get_session_info()
            st.json(info)
        
def renderizar_debug_sessao():
    """Renderiza informa√ß√µes de debug da sess√£o (apenas para desenvolvimento)."""
    # (Manter o corpo original da fun√ß√£o)
    st.sidebar.markdown("### üîß Debug da Sess√£o")
    
    info = get_session_info()
    
    st.sidebar.json(info)
    
    if st.sidebar.button("üóëÔ∏è Limpar Sess√£o Debug"):
        clear_lcz_session_data()
        st.sidebar.success("Sess√£o limpa!")
    
    # Valida√ß√£o em tempo real
    if st.session_state.lcz_data is not None:
        from utils.lcz4r import validate_lcz_data
        validation = validate_lcz_data(st.session_state.lcz_data)
        
        st.sidebar.markdown("**Valida√ß√£o:**")
        if validation['valid']:
            st.sidebar.success("‚úÖ Dados v√°lidos")
        else:
            st.sidebar.error("‚ùå Dados inv√°lidos")
        
        if validation['warnings']:
            st.sidebar.warning(f"‚ö†Ô∏è {len(validation['warnings'])} avisos")
        
        if validation['errors']:
            st.sidebar.error(f"‚ùå {len(validation['errors'])} erros")

def renderizar_gerador_lcz():
    """Renderiza a se√ß√£o do gerador de mapas LCZ."""
    
    # Expandir automaticamente se n√£o houver dados, para focar no primeiro passo
    expanded_state = not st.session_state.lcz_processing_success 
    if st.session_state.lcz_data is not None:
        expanded_state = False # Recolhe se j√° gerou um mapa
        
    with st.expander("üõ†Ô∏è Configura√ß√µes e Gera√ß√£o de Mapa LCZ", expanded=expanded_state):
        st.markdown("""
        A ferramenta **LCZ4r** utiliza dados de sat√©lite de alta resolu√ß√£o para classificar o ambiente urbano.
        Gere um novo mapa ou use o mapa carregado na sess√£o:
        """)
        
        # Interface de entrada
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            cidade_nome = st.text_input(
                "üèôÔ∏è Nome da Cidade (Formato 'Cidade, Pa√≠s'):",
                placeholder="Ex: S√£o Paulo, Brazil ou London, UK",
                help="Digite o nome completo da cidade para geocodifica√ß√£o",
                value=st.session_state.lcz_city_name or ""
            )
        
        with col2:
            gerar_mapa = st.button("üöÄ Gerar Mapa LCZ", type="primary", use_container_width=True, key="gerar_mapa_btn")
        
        with col3:
            if st.session_state.lcz_data is not None:
                # Bot√£o de limpar dados s√≥ aparece se houver dados
                if st.button("üóëÔ∏è Limpar Dados", use_container_width=True, key="limpar_dados_btn"):
                    clear_lcz_session_data()
                    st.rerun()
            else:
                st.empty() # Placeholder para manter o alinhamento
        
        # Processamento do mapa
        if gerar_mapa and cidade_nome:
            processar_mapa_lcz(cidade_nome)

def processar_mapa_lcz(cidade_nome):
    """
    Processa e gera o mapa LCZ para a cidade especificada com tratamento robusto de erros.
    """
    
    # Limpar dados anteriores (para garantir um novo processamento limpo)
    clear_lcz_session_data()
    
    # Barra de progresso e status
    progress_bar = st.progress(0)
    status_text = st.empty()
    error_container = st.empty()
    
    try:
        # Etapa 1: Valida√ß√£o inicial
        status_text.text("üîç Validando entrada...")
        progress_bar.progress(10)
        
        if not cidade_nome or len(cidade_nome.strip()) < 2:
            raise ValueError("Nome da cidade deve ter pelo menos 2 caracteres")
        
        cidade_nome = cidade_nome.strip()
        
        # Etapa 2: Download dos dados LCZ
        status_text.text(f"üåç Baixando dados LCZ para '{cidade_nome}'...")
        progress_bar.progress(45)
        
        # Importar exce√ß√µes personalizadas (Assumindo que est√£o em utils.lcz4r)
        from utils.lcz4r import GeocodeError, DataProcessingError
        
        data, profile = lcz_get_map(cidade_nome)
        
        # Etapa 3: Processamento vetorial
        status_text.text("‚öôÔ∏è Convertendo Raster para Pol√≠gonos (GeoDataFrame)...")
        progress_bar.progress(65)
        
        lcz_gdf = process_lcz_map(data, profile)
        
        # Etapa 4: Aprimoramento dos dados (Descri√ß√µes, √Åreas, etc.)
        status_text.text("‚ú® Calculando estat√≠sticas e aprimorando atributos...")
        progress_bar.progress(80)
        
        enhanced_gdf = enhance_lcz_data(lcz_gdf)
        
        # Etapa 5: Valida√ß√£o e Salvamento
        status_text.text("üíæ Validando e salvando dados na sess√£o...")
        progress_bar.progress(90)
        
        from utils.lcz4r import validate_lcz_data
        validation_result = validate_lcz_data(enhanced_gdf)
        
        if not validation_result['valid']:
            # Permite continuar, mas com aviso grave
            st.warning(f"‚ö†Ô∏è **Aviso de Valida√ß√£o Grave:** Dados LCZ gerados, mas com inconsist√™ncias. [Detalhes abaixo]")
            
        # Usar fun√ß√£o aprimorada de salvamento
        success = save_lcz_data_to_session(data, profile, cidade_nome, enhanced_gdf)
        
        if not success:
            raise Exception("Falha ao salvar dados na sess√£o")
        
        st.session_state.lcz_validation_result = validation_result
        
        # Etapa 6: Finaliza√ß√£o
        progress_bar.progress(100)
        status_text.text("‚úÖ Processamento conclu√≠do! O mapa e as an√°lises est√£o prontas para explora√ß√£o.")
        
        # Exibir m√©tricas de sucesso em linha
        gdf = st.session_state.lcz_data
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Classes √önicas", len(gdf['zcl_classe'].unique()))
        with col2:
            st.metric("Pol√≠gonos Totais", len(gdf))
        with col3:
            area_total = gdf['area_km2'].sum() if 'area_km2' in gdf.columns else 0
            st.metric("√Årea Coberta", f"{area_total:.1f} km¬≤")
        with col4:
            st.metric("Tamanho na Mem√≥ria", f"{st.session_state.lcz_data_size_mb:.1f} MB")
        
        if validation_result['warnings'] or validation_result['errors']:
            with st.expander("‚ö†Ô∏è Ver Avisos e Erros de Valida√ß√£o"):
                for warning in validation_result['warnings']:
                    st.warning(f"‚ö†Ô∏è {warning}")
                for error in validation_result['errors']:
                    st.error(f"‚ùå {error}")
        
        time.sleep(1)
        st.rerun()
        
    except GeocodeError as e:
        progress_bar.progress(0)
        status_text.text("")
        error_container.error(f"üåê **Erro de Geocodifica√ß√£o:** N√£o foi poss√≠vel localizar a cidade. {str(e)}")
        # (Manter dicas de GeocodeError)
        st.session_state.lcz_error_message = f"Geocodifica√ß√£o: {str(e)}"
        
    except DataProcessingError as e:
        progress_bar.progress(0)
        status_text.text("")
        error_container.error(f"üìä **Erro no Processamento:** Falha na convers√£o ou valida√ß√£o dos dados. {str(e)}")
        # (Manter dicas de DataProcessingError)
        st.session_state.lcz_error_message = f"Processamento: {str(e)}"
        
    except Exception as e:
        progress_bar.progress(0)
        status_text.text("")
        error_container.error(f"‚ùå **Erro Inesperado:** Ocorreu um erro cr√≠tico durante a gera√ß√£o. {str(e)}")
        # (Manter informa√ß√µes t√©cnicas)
        st.session_state.lcz_error_message = f"Cr√≠tico: {type(e).__name__} - {str(e)}"
    
    finally:
        progress_bar.empty()
        status_text.empty()

def renderizar_secao_matplotlib():
    """Renderiza a se√ß√£o de visualiza√ß√£o com matplotlib (Cient√≠fica)."""
    
    st.markdown("### üó∫Ô∏è Visualiza√ß√£o para Publica√ß√£o Cient√≠fica")
    st.info("Utilize esta se√ß√£o para gerar imagens est√°ticas em alta resolu√ß√£o, ideais para relat√≥rios e artigos.")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        titulo_personalizado = st.text_input(
            "üè∑Ô∏è T√≠tulo do Mapa:",
            placeholder=f"Zonas Clim√°ticas Locais - {st.session_state.lcz_city_name or 'Cidade'}",
            value=st.session_state.lcz_city_name or ""
        )
    
    with col2:
        alta_resolucao = st.checkbox(
            "üì∏ Alta Resolu√ß√£o (300 DPI)",
            value=True,
            help="Ativar para melhor qualidade de impress√£o, mas pode levar mais tempo para gerar."
        )
    
    if st.button("üé® Gerar/Atualizar Visualiza√ß√£o", type="primary", use_container_width=True):
        gerar_visualizacao_matplotlib(titulo_personalizado, alta_resolucao)
        
    # Renderiza a √∫ltima visualiza√ß√£o gerada se estiver na sess√£o (opcional, requer salvar a figura em cache/sess√£o)
    # Para simplicidade, vamos garantir que o bot√£o sempre gere a visualiza√ß√£o.
    
    # Adicionar o download do GeoJSON aqui tamb√©m
    if st.session_state.lcz_data is not None:
        geojson_data = st.session_state.lcz_data.to_json()
        st.download_button(
            label="üó∫Ô∏è Baixar Dados GeoJSON (Vetorial)",
            data=geojson_data,
            file_name=f"lcz_data_{st.session_state.lcz_city_name or 'cidade'}.geojson",
            mime="application/json",
            help="Dados vetoriais completos do mapa LCZ, incluindo geometria e atributos aprimorados.",
            key="download_geojson_matplot"
        )

def gerar_visualizacao_matplotlib(titulo_personalizado=None, alta_resolucao=True):
    """Gera visualiza√ß√£o usando matplotlib e lcz_plot_map."""
    
    with st.spinner("Gerando visualiza√ß√£o de alta qualidade..."):
        try:
            data = st.session_state.lcz_raster_data
            profile = st.session_state.lcz_raster_profile
            
            if data is None or profile is None:
                st.error("‚ùå Dados raster n√£o encontrados. Gere um mapa primeiro.")
                return
            
            figsize = (16, 12) if alta_resolucao else (12, 8)
            dpi = 300 if alta_resolucao else 150
            
            cidade = st.session_state.lcz_city_name or "Cidade"
            titulo = titulo_personalizado if titulo_personalizado else f"Mapa de Zonas Clim√°ticas Locais - {cidade}"
            
            # Gerar visualiza√ß√£o usando lcz_plot_map
            plt.figure(figsize=figsize, dpi=dpi)
            fig = lcz_plot_map(
                (data, profile),
                title=titulo,
                show_legend=True,
                isave=False
            )
            
            buf = BytesIO()
            plt.savefig(buf, format='png', dpi=dpi, bbox_inches='tight', 
                       facecolor='white', edgecolor='none')
            buf.seek(0)
            
            st.markdown("#### üñºÔ∏è Visualiza√ß√£o Gerada")
            st.image(buf, caption=titulo, use_container_width=True)
            
            buf.seek(0)
            png_data = buf.getvalue()
            
            st.download_button(
                label="üì∏ Baixar Imagem PNG",
                data=png_data,
                file_name=f"lcz_map_{st.session_state.lcz_city_name or 'cidade'}_{'HR' if alta_resolucao else 'LR'}.png",
                mime="image/png",
                help="Imagem do mapa LCZ em formato PNG de alta qualidade",
                key="download_png_matplot_2" # Chave diferente para evitar conflito
            )
            
            plt.close(fig)
            st.success("‚úÖ Visualiza√ß√£o gerada com sucesso!")
            
        except Exception as e:
            st.error(f"‚ùå Erro ao gerar visualiza√ß√£o: {str(e)}")
            st.code(str(e))

def renderizar_secao_calculo_area():
    """
    Renderiza a se√ß√£o de c√°lculo de √°rea com an√°lise avan√ßada usando st.tabs para organiza√ß√£o.
    """
    
    st.markdown("### üìà Distribui√ß√£o e An√°lise Estat√≠stica de √Årea")
    st.info("Esta an√°lise quantifica a presen√ßa de cada classe LCZ na √°rea total, sendo fundamental para o planejamento urbano e mitiga√ß√£o de ICU.")
    
    if st.session_state.lcz_data is None:
        st.warning("‚ö†Ô∏è Dados LCZ n√£o encontrados na sess√£o.")
        return
    
    try:
        # 1. Pr√©-c√°lculo ou Rec√°lculo se necess√°rio
        if st.session_state.lcz_area_stats is None or st.session_state.lcz_plot_data is None:
            with st.spinner("Calculando estat√≠sticas de √°rea..."):
                result = lcz_cal_area(st.session_state.lcz_data)
                st.session_state.lcz_area_stats = result['stats']
                st.session_state.lcz_plot_data = result['plot_data']
                st.session_state.lcz_area_summary = result['summary']
        
        # Usar dados da sess√£o
        area_stats = st.session_state.lcz_area_stats
        plot_data = st.session_state.lcz_plot_data
        summary = st.session_state.lcz_area_summary
        
        # 2. Resumo e Controle
        col_resumo_1, col_resumo_2 = st.columns([3, 1])
        
        with col_resumo_1:
            st.markdown("#### Resumo da Cobertura")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total √Årea", f"{summary['total_area_km2']:.1f} km¬≤")
            with col2:
                st.metric("Classes √önicas", summary['num_classes'])
            with col3:
                st.metric("Pol√≠gonos", summary['num_total_poligonos'])
            with col4:
                st.metric("Dominante", summary['classe_dominante'], f"{summary['percentual_classe_dominante']:.1f}%")
        
        with col_resumo_2:
            st.markdown("#### A√ß√µes")
            if st.button("üîÑ Recalcular √Åreas", help="For√ßa o rec√°lculo das estat√≠sticas", use_container_width=True):
                st.session_state.lcz_area_stats = None
                st.session_state.lcz_plot_data = None
                st.session_state.lcz_area_summary = None
                st.rerun()

        st.markdown("---")
        
        # 3. Tabs para organizar a an√°lise
        tab_grafico, tab_tabela, tab_relatorio, tab_metrica = st.tabs(
            ["üìà Gr√°fico Interativo", "üìã Tabela Detalhada", "üìÑ Relat√≥rio TXT", "üîç M√©tricas Avan√ßadas"]
        )

        with tab_grafico:
            st.markdown("#### Configura√ß√£o de Gr√°fico")
            col_g_1, col_g_2 = st.columns(2)
            with col_g_1:
                tipo_grafico = st.selectbox(
                    "üìä Tipo de Gr√°fico:",
                    ["bar", "pie", "donut", "treemap"],
                    format_func=lambda x: {"bar": "Barras (LCZ vs √Årea)", "pie": "Pizza (Percentual)", "donut": "Donut", "treemap": "Mapa de √Årvore"}[x],
                    help="Escolha o formato de visualiza√ß√£o"
                )
            with col_g_2:
                # Bot√£o para gerar, for√ßar a regenera√ß√£o do gr√°fico
                if st.button("üé® Gerar Gr√°fico", key="gerar_grafico_area", type="primary", use_container_width=True):
                    # For√ßa a gera√ß√£o e exibi√ß√£o (Plotly √© exibido automaticamente)
                    pass
            
            # Gerar gr√°fico principal (Plotly)
            fig = criar_grafico_area_plotly(area_stats, plot_data, tipo_grafico)
            
            if fig:
                st.plotly_chart(fig, use_container_width=True)
                
                # Download do Gr√°fico
                import plotly.io as pio
                col_d_1, col_d_2 = st.columns(2)
                with col_d_1:
                    img_bytes = pio.to_image(fig, format="png", width=1200, height=800, scale=2)
                    st.download_button(
                        label="üì∏ Baixar Gr√°fico PNG",
                        data=img_bytes,
                        file_name=f"lcz_area_{st.session_state.lcz_city_name}_{tipo_grafico}.png",
                        mime="image/png"
                    )
                with col_d_2:
                    html_data = fig.to_html(include_plotlyjs='cdn')
                    st.download_button(
                        label="üåê Baixar Gr√°fico HTML (Interativo)",
                        data=html_data,
                        file_name=f"lcz_area_{st.session_state.lcz_city_name}_{tipo_grafico}.html",
                        mime="text/html"
                    )


        with tab_tabela:
            st.markdown("#### Tabela Estat√≠stica por Classe LCZ")
            st.info("Dados brutos e formatados para an√°lise e exporta√ß√£o.")
            
            # Formatar tabela para melhor visualiza√ß√£o
            area_stats_display = area_stats.copy()
            area_stats_display = area_stats_display.rename(columns={
                "zcl_classe": "Classe LCZ",
                "area_total_km2": "√Årea Total (km¬≤)",
                "num_poligonos": "Pol√≠gonos",
                "area_media_km2": "√Årea M√©dia (km¬≤)",
                "percentual": "Percentual (%)"
            })
            
            st.dataframe(
                area_stats_display,
                use_container_width=True,
                column_config={
                    "Classe LCZ": "Classe LCZ",
                    "√Årea Total (km¬≤)": st.column_config.NumberColumn(format="%.2f"),
                    "Pol√≠gonos": "Pol√≠gonos",
                    "√Årea M√©dia (km¬≤)": st.column_config.NumberColumn(format="%.3f"),
                    "Percentual (%)": st.column_config.NumberColumn(format="%.1f%%")
                }
            )
            
            # Download dos dados em CSV
            csv_data = area_stats.to_csv(index=False)
            st.download_button(
                label="üìä Baixar Dados CSV",
                data=csv_data,
                file_name=f"lcz_area_stats_{st.session_state.lcz_city_name or 'cidade'}.csv",
                mime="text/csv",
                help="Baixar estat√≠sticas de √°rea em formato CSV",
                key="download_csv_area"
            )

        with tab_relatorio:
            st.markdown("#### Relat√≥rio Detalhado de An√°lise LCZ")
            st.info("Um relat√≥rio em texto simples que resume a metodologia e os principais achados da an√°lise.")
            
            # Gerar relat√≥rio
            relatorio = lcz_area_analysis_report(st.session_state.lcz_data, st.session_state.lcz_city_name)
            
            st.text_area("Conte√∫do do Relat√≥rio:", value=relatorio, height=400)
            
            st.download_button(
                label="üìÑ Baixar Relat√≥rio TXT",
                data=relatorio,
                file_name=f"relatorio_lcz_area_{st.session_state.lcz_city_name or 'cidade'}.txt",
                mime="text/plain",
                help="Baixar relat√≥rio completo em formato texto",
                key="download_relatorio_area"
            )

        with tab_metrica:
            st.markdown("#### M√©tricas de Clima Urbano (LCZ)")
            st.info("Estas m√©tricas ajudam a quantificar o n√≠vel de urbaniza√ß√£o e fragmenta√ß√£o da √°rea.")
            
            col_m_1, col_m_2 = st.columns(2)
            
            # An√°lise urbano vs natural
            urbano_mask = area_stats['zcl_classe'].str.contains('LCZ [1-9]|LCZ 10')
            natural_mask = area_stats['zcl_classe'].str.contains('LCZ [A-G]')
            
            area_urbana = area_stats[urbano_mask]['area_total_km2'].sum()
            area_natural = area_stats[natural_mask]['area_total_km2'].sum()
            
            percent_urbano = (area_urbana/summary['total_area_km2']*100) if summary['total_area_km2'] else 0
            percent_natural = (area_natural/summary['total_area_km2']*100) if summary['total_area_km2'] else 0
            
            with col_m_1:
                st.metric(
                    "√Årea Urbana (1-10)",
                    f"{area_urbana:.1f} km¬≤",
                    f"{percent_urbano:.1f}%"
                )
                st.metric(
                    "√Årea Natural (A-G)",
                    f"{area_natural:.1f} km¬≤",
                    f"{percent_natural:.1f}%"
                )
                
            with col_m_2:
                # Fragmenta√ß√£o
                fragmentacao = summary['num_total_poligonos'] / summary['total_area_km2'] if summary['total_area_km2'] else 0
                st.metric(
                    "Fragmenta√ß√£o (Pol/km¬≤)",
                    f"{fragmentacao:.2f}",
                    help="Densidade de pol√≠gonos por km¬≤ (maior valor = mais fragmentado)"
                )
                
                # Classe mais fragmentada (manter l√≥gica anterior)
                area_stats['fragmentacao'] = area_stats['num_poligonos'] / area_stats['area_total_km2'].replace(0, 1e-6) # Evita divis√£o por zero
                classe_fragmentada = area_stats.loc[area_stats['fragmentacao'].idxmax(), 'zcl_classe']
                
                st.metric(
                    "Classe Mais Fragmentada",
                    classe_fragmentada,
                    f"{area_stats['fragmentacao'].max():.2f} pol/km¬≤"
                )

    except Exception as e:
        st.error(f"‚ùå Erro ao renderizar an√°lise de √°rea: {str(e)}")
        st.info("Limpeza dos dados de √°rea recomendada para tentar novamente.")
        # Limpar dados corrompidos
        st.session_state.lcz_area_stats = None
        st.session_state.lcz_plot_data = None
        st.session_state.lcz_area_summary = None

def criar_grafico_area_plotly(area_stats, plot_data, tipo_grafico):
    """
    Cria gr√°fico Plotly baseado no tipo selecionado, com melhor est√©tica.
    """
    
    try:
        cores_lcz = plot_data['cores_lcz'] # Cores LCZ completas do plot_data
        colors = [cores_lcz.get(classe, '#808080') for classe in area_stats['zcl_classe']]
        
        cidade_nome = st.session_state.lcz_city_name or 'Cidade'
        
        if tipo_grafico == "bar":
            fig = px.bar(
                area_stats, 
                x='zcl_classe', 
                y='area_total_km2',
                title=f"Distribui√ß√£o de √Årea por Classe LCZ - {cidade_nome}",
                color='zcl_classe',
                color_discrete_map=cores_lcz,
                hover_data=['num_poligonos', 'area_media_km2', 'percentual'],
                labels={
                    'area_total_km2': '√Årea Total (km¬≤)',
                    'zcl_classe': 'Classe LCZ',
                    'num_poligonos': 'N¬∫ Pol√≠gonos',
                    'area_media_km2': '√Årea M√©dia (km¬≤)',
                    'percentual': 'Percentual (%)'
                }
            )
            fig.update_layout(showlegend=False, xaxis_tickangle=-45, 
                              xaxis={'categoryorder': 'array', 'categoryarray': list(cores_lcz.keys())})
            
        elif tipo_grafico in ["pie", "donut"]:
            hole_val = 0.4 if tipo_grafico == "donut" else 0
            
            fig = go.Figure(data=[go.Pie(
                labels=area_stats['zcl_classe'],
                values=area_stats['area_total_km2'],
                hole=hole_val,
                marker_colors=colors,
                hovertemplate='<b>%{label}</b><br>' +
                             '√Årea: %{value:.2f} km¬≤<br>' +
                             'Percentual: %{percent}<br>' +
                             'N¬∫ Pol√≠gonos: %{customdata[0]}<extra></extra>',
                customdata=area_stats[['num_poligonos']]
            )])
            
            fig.update_layout(
                title=f"Distribui√ß√£o Percentual de √Årea LCZ ({tipo_grafico.capitalize()}) - {cidade_nome}",
                annotations=[dict(text='LCZ', x=0.5, y=0.5, font_size=20, showarrow=False)] if tipo_grafico == "donut" else []
            )
            
        elif tipo_grafico == "treemap":
            fig = px.treemap(
                area_stats,
                path=['zcl_classe'],
                values='area_total_km2',
                title=f"Mapa de √Årvore - Distribui√ß√£o LCZ - {cidade_nome}",
                color='zcl_classe',
                color_discrete_map=cores_lcz,
                hover_data=['num_poligonos', 'percentual']
            )
        
        # Configura√ß√µes gerais
        fig.update_layout(
            font=dict(size=12, family="Arial"),
            title_font_size=18,
            height=600,
            template="plotly_white" # Estilo mais limpo
        )
        
        return fig
        
    except Exception as e:
        st.error(f"‚ùå Erro ao criar gr√°fico: {str(e)}")
        return None

# Fun√ß√µes obsoletas removidas (gerar_grafico_area_plotly)
# C√≥digo de gera√ß√£o de gr√°fico limpo para usar a nova fun√ß√£o criar_grafico_area_plotly

def renderizar_mapa_folium():
    """Renderiza o mapa interativo com Folium usando dados da sess√£o (Foco Did√°tico no Popup)."""
    
    st.markdown("### üñ±Ô∏è Mapa Interativo LCZ e Impacto Urbano")
    st.info("Explore a distribui√ß√£o espacial das LCZ. Clique em cada pol√≠gono para ver suas propriedades detalhadas e o impacto clim√°tico.")
    
    try:
        gdf_lcz = st.session_state.lcz_data
        
        if gdf_lcz is None or gdf_lcz.empty:
            st.warning("‚ö†Ô∏è Dados LCZ n√£o encontrados na sess√£o.")
            return
        
        # Calcular centro e bounds
        bounds = gdf_lcz.total_bounds
        center_lat = (bounds[1] + bounds[3]) / 2
        center_lon = (bounds[0] + bounds[2]) / 2
        
        m = folium.Map(
            location=[center_lat, center_lon],
            zoom_start=11,
            tiles='CartoDB Positron' # Tile mais neutro para destacar o LCZ
        )
        
        # Cores LCZ padr√£o (aqui estamos usando a paleta de lcz4r)
        cores_lcz = {
            'LCZ 1':  '#910613',  'LCZ 2':  '#D9081C',  'LCZ 3':  '#FF0A22',  'LCZ 4':  '#C54F1E',
            'LCZ 5':  '#FF6628',  'LCZ 6':  '#FF985E',  'LCZ 7':  '#FDED3F',  'LCZ 8':  '#BBBBBB',
            'LCZ 9':  '#FFCBAB',  'LCZ 10': '#565656',  'LCZ A':  '#006A18',  'LCZ B':  '#00A926',
            'LCZ C':  '#628432',  'LCZ D':  '#B5DA7F',  'LCZ E':  '#000000',  'LCZ F':  '#FCF7B1',
            'LCZ G':  '#656BFA'
        }
        
        # Adicionar camada GeoJSON
        # Nota: O uso de iterrows pode ser lento para muitos pol√≠gonos. Para otimiza√ß√£o, 
        # usar folium.GeoJson(gdf_lcz.to_json(), ...) √© melhor, mas o popup din√¢mico requer a itera√ß√£o.
        
        # Tentar usar folium.GeoJson para a camada, e passar a fun√ß√£o style/popup
        def style_function(feature):
            classe = feature['properties'].get('zcl_classe', 'Desconhecida')
            cor = cores_lcz.get(classe, '#808080')
            return {
                'fillColor': cor,
                'color': 'black',
                'weight': 0.5,
                'fillOpacity': 0.7,
                'opacity': 0.8
            }
            
        def highlight_function(feature):
            return {
                'weight': 3,
                'color': '#ff0000',
                'fillOpacity': 0.9
            }

        # Cria a camada GeoJson com Tooltip e Popup aprimorados
        folium.GeoJson(
            gdf_lcz.to_json(),
            name=f"LCZ - {st.session_state.lcz_city_name}",
            style_function=style_function,
            highlight_function=highlight_function,
            tooltip=folium.GeoJsonTooltip(
                fields=['zcl_classe', 'area_km2', 'descricao', 'efeito_temp'],
                aliases=['Classe LCZ:', '√Årea (km¬≤):', 'Descri√ß√£o:', 'Efeito T√©rmico:'],
                localize=True,
                sticky=False,
                labels=True,
                style=("background-color: white; color: black; font-family: sans-serif; font-size: 14px; padding: 10px;")
            ),
            popup=folium.GeoJsonPopup(
                fields=['zcl_classe', 'area_km2', 'descricao', 'efeito_temp', 'ilha_calor', 'intervencao'],
                aliases=['Classe:', '√Årea (km¬≤):', 'Descri√ß√£o:', 'Efeito T√©rmico:', 'ICU:', 'Interven√ß√£o:'],
                localize=True,
                labels=True,
                style="background-color: white;",
                max_width=350
            )
        ).add_to(m)

        # Adicionar Legenda (Necess√°rio implementar a legenda LCZ4r no folium, mas vamos simplificar aqui)
        # O folium n√£o tem uma maneira f√°cil de adicionar a legenda LCZ4r. Deixar como melhoria.
        folium.LayerControl().add_to(m)
        m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])
        
        # Exibir mapa
        st_folium(m, width="100%", height=700, feature_group_to_add=m._children.get('geojson')) # O nome 'geojson' pode variar
        
        # Estat√≠sticas do mapa (Simplificadas, j√° est√£o em outras se√ß√µes)
        with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre os Atributos do Mapa"):
            st.markdown("""
            Os pol√≠gonos no mapa cont√™m atributos aprimorados:
            - **zcl_classe:** O c√≥digo da LCZ (ex: LCZ 2).
            - **area_km2:** √Årea total do pol√≠gono em quil√¥metros quadrados.
            - **descricao:** Descri√ß√£o detalhada da classe LCZ.
            - **efeito_temp:** O efeito clim√°tico t√≠pico desta LCZ.
            - **ilha_calor:** O potencial de contribui√ß√£o para a Ilha de Calor Urbana (ICU).
            - **intervencao:** Sugest√£o de interven√ß√£o para mitiga√ß√£o de ICU.
            """)
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar mapa interativo: {str(e)}")
        st.info("üí° Verifique se a GeoDataFrame cont√©m os atributos esperados ('zcl_classe', 'area_km2', etc.) ou tente limpar a sess√£o.")

# --- Fim das Fun√ß√µes de Renderiza√ß√£o ---